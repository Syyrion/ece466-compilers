Nonterminals useless in grammar

    declaration_list
    declaration
    init_declarator_list
    init_declarator
    type_name
    initializer


Terminals unused in grammar

    ">="
    BREAK
    CASE
    CONTINUE
    DEFAULT
    DO
    ELSE
    FOR
    GOTO
    IF
    RETURN
    SWITCH
    WHILE
    _IMAGINARY


Rules useless in grammar

  187 external_declaration: declaration

  188 function_definition: declaration_specifiers declarator declaration_list compound_statement

  189 declaration_list: declaration
  190                 | declaration_list declaration

  191 block_item: declaration

  192 declaration: declaration_specifiers init_declarator_list ';'

  193 init_declarator_list: init_declarator init_declarator_list ',' init_declarator

  194 init_declarator: declarator
  195                | declarator '=' initializer

  196 type_name: specifier_qualifier_list
  197          | specifier_qualifier_list abstract_declarator

  198 initializer: assignment_expression


Rules useless in parser due to conflicts

   52 relational_expression: relational_expression "<=" shift_expression


State 39 conflicts: 5 reduce/reduce
State 117 conflicts: 2 reduce/reduce
State 245 conflicts: 17 reduce/reduce


Grammar

    0 $accept: external_declaration $end

    1 external_declaration: function_definition

    2 function_definition: declaration_specifiers declarator compound_statement

    3 compound_statement: '{' block_item_list '}' '{' '}'

    4 block_item_list: block_item
    5                | block_item_list block_item

    6 block_item: statement

    7 statement: compound_statement
    8          | expression_statement

    9 expression_statement: expression ';'
   10                     | ';'

   11 primary_expression: IDENT
   12                   | CHARLIT
   13                   | STRINGLIT
   14                   | NUMBERLIT
   15                   | '(' expression ')'

   16 postfix_expression: primary_expression
   17                   | postfix_expression '[' expression ']'
   18                   | postfix_expression '(' ')'
   19                   | postfix_expression '(' argument_expression_list ')'
   20                   | postfix_expression '.' IDENT
   21                   | postfix_expression "->" IDENT
   22                   | postfix_expression "++"
   23                   | postfix_expression "--"

   24 argument_expression_list: assignment_expression
   25                         | argument_expression_list ',' assignment_expression

   26 unary_expression: postfix_expression
   27                 | "++" unary_expression
   28                 | "--" unary_expression
   29                 | '&' cast_expression
   30                 | '*' cast_expression
   31                 | '+' cast_expression
   32                 | '-' cast_expression
   33                 | '~' cast_expression
   34                 | '!' cast_expression
   35                 | SIZEOF unary_expression
   36                 | ALIGNOF unary_expression

   37 cast_expression: unary_expression

   38 multiplicative_expression: cast_expression
   39                          | multiplicative_expression '*' cast_expression
   40                          | multiplicative_expression '/' cast_expression
   41                          | multiplicative_expression '%' cast_expression

   42 additive_expression: multiplicative_expression
   43                    | additive_expression '+' multiplicative_expression
   44                    | additive_expression '-' multiplicative_expression

   45 shift_expression: additive_expression
   46                 | shift_expression "<<" additive_expression
   47                 | shift_expression ">>" additive_expression

   48 relational_expression: shift_expression
   49                      | relational_expression '<' shift_expression
   50                      | relational_expression "<=" shift_expression
   51                      | relational_expression '>' shift_expression
   52                      | relational_expression "<=" shift_expression

   53 equality_expression: relational_expression
   54                    | equality_expression "==" relational_expression
   55                    | equality_expression "!=" relational_expression

   56 and_expression: equality_expression
   57               | and_expression '&' equality_expression

   58 xor_expression: and_expression
   59               | xor_expression '^' and_expression

   60 or_expression: xor_expression
   61              | or_expression '|' xor_expression

   62 logical_and_expression: or_expression
   63                       | logical_and_expression "&&" or_expression

   64 logical_or_expression: logical_and_expression
   65                      | logical_or_expression "||" logical_and_expression

   66 conditional_expression: logical_or_expression
   67                       | logical_or_expression '?' expression ':' conditional_expression

   68 assignment_expression: conditional_expression
   69                      | unary_expression '=' assignment_expression
   70                      | unary_expression "*=" assignment_expression
   71                      | unary_expression "/=" assignment_expression
   72                      | unary_expression "%=" assignment_expression
   73                      | unary_expression "+=" assignment_expression
   74                      | unary_expression "-=" assignment_expression
   75                      | unary_expression "<<=" assignment_expression
   76                      | unary_expression ">>=" assignment_expression
   77                      | unary_expression "&=" assignment_expression
   78                      | unary_expression "^=" assignment_expression
   79                      | unary_expression "|=" assignment_expression

   80 expression: assignment_expression
   81           | expression ',' assignment_expression

   82 constant_expression: conditional_expression

   83 declaration_specifiers: storage_class_specifier
   84                       | declaration_specifiers storage_class_specifier
   85                       | type_specifier
   86                       | declaration_specifiers type_specifier
   87                       | type_qualifier
   88                       | declaration_specifiers type_qualifier
   89                       | function_specifier
   90                       | declaration_specifiers function_specifier

   91 storage_class_specifier: TYPEDEF
   92                        | EXTERN
   93                        | STATIC
   94                        | AUTO
   95                        | REGISTER

   96 type_specifier: VOID
   97               | CHAR
   98               | SHORT
   99               | INT
  100               | LONG
  101               | FLOAT
  102               | DOUBLE
  103               | SIGNED
  104               | UNSIGNED
  105               | _BOOL
  106               | _COMPLEX
  107               | struct_or_union_specifier
  108               | enum_specifier
  109               | typedef_name

  110 struct_or_union_specifier: struct_or_union '{' struct_declaration_list '}'
  111                          | struct_or_union IDENT '{' struct_declaration_list '}'
  112                          | struct_or_union IDENT

  113 struct_or_union: STRUCT
  114                | UNION

  115 struct_declaration_list: struct_declaration
  116                        | struct_declaration_list struct_declaration

  117 struct_declaration: specifier_qualifier_list struct_declarator_list ';'

  118 specifier_qualifier_list: type_specifier
  119                         | specifier_qualifier_list type_specifier
  120                         | type_qualifier
  121                         | specifier_qualifier_list type_qualifier

  122 struct_declarator_list: struct_declarator
  123                       | struct_declarator_list ',' struct_declarator

  124 struct_declarator: declarator
  125                  | ':' constant_expression
  126                  | declarator ':' constant_expression

  127 enum_specifier: ENUM IDENT
  128               | ENUM '{' enumerator_list '}'
  129               | ENUM IDENT '{' enumerator_list '}'
  130               | ENUM '{' enumerator_list ',' '}'
  131               | ENUM IDENT '{' enumerator_list ',' '}'

  132 enumerator_list: enumerator
  133                | enumerator_list ',' enumerator

  134 enumerator: enumeration_constant
  135           | enumeration_constant '=' constant_expression

  136 enumeration_constant: IDENT

  137 type_qualifier: CONST
  138               | RESTRICT
  139               | VOLATILE

  140 function_specifier: INLINE

  141 declarator: direct_declarator
  142           | pointer direct_declarator

  143 direct_declarator: IDENT
  144                  | '(' declarator ')'
  145                  | direct_declarator '[' ']'
  146                  | direct_declarator '[' type_qualifier_list ']'
  147                  | direct_declarator '[' assignment_expression ']'
  148                  | direct_declarator '[' type_qualifier_list assignment_expression ']'
  149                  | direct_declarator '[' STATIC assignment_expression ']'
  150                  | direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'
  151                  | direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'
  152                  | direct_declarator '[' type_qualifier_list '*' ']'
  153                  | direct_declarator '[' '*' ']'
  154                  | direct_declarator '(' parameter_type_list ')'
  155                  | direct_declarator '(' identifier_list ')'
  156                  | direct_declarator '(' ')'

  157 pointer: '*'
  158        | '*' type_qualifier_list
  159        | '*' pointer
  160        | '*' type_qualifier_list pointer

  161 type_qualifier_list: type_qualifier
  162                    | type_qualifier_list type_qualifier

  163 parameter_type_list: parameter_list
  164                    | parameter_list ',' "..."

  165 parameter_list: parameter_declaration
  166               | parameter_list ',' parameter_declaration

  167 parameter_declaration: declaration_specifiers declarator
  168                      | declaration_specifiers
  169                      | declaration_specifiers abstract_declarator

  170 identifier_list: IDENT
  171                | identifier_list ',' IDENT

  172 abstract_declarator: pointer
  173                    | direct_abstract_declarator
  174                    | pointer direct_abstract_declarator

  175 direct_abstract_declarator: '(' abstract_declarator ')'
  176                           | '[' ']'
  177                           | direct_abstract_declarator '[' ']'
  178                           | '[' assignment_expression ']'
  179                           | direct_abstract_declarator '[' assignment_expression ']'
  180                           | '[' '*' ']'
  181                           | direct_abstract_declarator '[' '*' ']'
  182                           | '(' ')'
  183                           | direct_abstract_declarator '(' ')'
  184                           | '(' parameter_type_list ')'
  185                           | direct_abstract_declarator '(' parameter_type_list ')'

  186 typedef_name: IDENT


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 34
    '%' (37) 41
    '&' (38) 29 57
    '(' (40) 15 18 19 144 154 155 156 175 182 183 184 185
    ')' (41) 15 18 19 144 154 155 156 175 182 183 184 185
    '*' (42) 30 39 152 153 157 158 159 160 180 181
    '+' (43) 31 43
    ',' (44) 25 81 123 130 131 133 164 166 171
    '-' (45) 32 44
    '.' (46) 20
    '/' (47) 40
    ':' (58) 67 125 126
    ';' (59) 9 10 117
    '<' (60) 49
    '=' (61) 69 135
    '>' (62) 51
    '?' (63) 67
    '[' (91) 17 145 146 147 148 149 150 151 152 153 176 177 178 179 180 181
    ']' (93) 17 145 146 147 148 149 150 151 152 153 176 177 178 179 180 181
    '^' (94) 59
    '{' (123) 3 110 111 128 129 130 131
    '|' (124) 61
    '}' (125) 3 110 111 128 129 130 131
    '~' (126) 33
    error (256)
    IDENT <string> (258) 11 20 21 111 112 127 129 131 136 143 170 171 186
    CHARLIT <string> (259) 12
    STRINGLIT <string> (260) 13
    NUMBERLIT <number> (261) 14
    "->" (262) 21
    "++" (263) 22 27
    "--" (264) 23 28
    "<<" (265) 46
    ">>" (266) 47
    "<=" (267) 50 52
    ">=" (268)
    "==" (269) 54
    "!=" (270) 55
    "&&" (271) 63
    "||" (272) 65
    "..." (273) 164
    "*=" (274) 70
    "/=" (275) 71
    "%=" (276) 72
    "+=" (277) 73
    "-=" (278) 74
    "<<=" (279) 75
    ">>=" (280) 76
    "&=" (281) 77
    "|=" (282) 79
    "^=" (283) 78
    AUTO (284) 94
    ALIGNOF (285) 36
    BREAK (286)
    CASE (287)
    CHAR (288) 97
    CONST (289) 137
    CONTINUE (290)
    DEFAULT (291)
    DO (292)
    DOUBLE (293) 102
    ELSE (294)
    ENUM (295) 127 128 129 130 131
    EXTERN (296) 92
    FLOAT (297) 101
    FOR (298)
    GOTO (299)
    IF (300)
    INLINE (301) 140
    INT (302) 99
    LONG (303) 100
    REGISTER (304) 95
    RESTRICT (305) 138
    RETURN (306)
    SHORT (307) 98
    SIGNED (308) 103
    SIZEOF (309) 35
    STATIC (310) 93 149 150 151
    STRUCT (311) 113
    SWITCH (312)
    TYPEDEF (313) 91
    UNION (314) 114
    UNSIGNED (315) 104
    VOID (316) 96
    VOLATILE (317) 139
    WHILE (318)
    _BOOL (319) 105
    _COMPLEX (320) 106
    _IMAGINARY (321)


Nonterminals, with rules where they appear

    $accept (91)
        on left: 0
    external_declaration (92)
        on left: 1
        on right: 0
    function_definition (93)
        on left: 2
        on right: 1
    compound_statement (94)
        on left: 3
        on right: 2 7
    block_item_list (95)
        on left: 4 5
        on right: 3 5
    block_item (96)
        on left: 6
        on right: 4 5
    statement (97)
        on left: 7 8
        on right: 6
    expression_statement (98)
        on left: 9 10
        on right: 8
    primary_expression <node> (99)
        on left: 11 12 13 14 15
        on right: 16
    postfix_expression <node> (100)
        on left: 16 17 18 19 20 21 22 23
        on right: 17 18 19 20 21 22 23 26
    argument_expression_list (101)
        on left: 24 25
        on right: 19 25
    unary_expression <node> (102)
        on left: 26 27 28 29 30 31 32 33 34 35 36
        on right: 27 28 35 36 37 69 70 71 72 73 74 75 76 77 78 79
    cast_expression <node> (103)
        on left: 37
        on right: 29 30 31 32 33 34 38 39 40 41
    multiplicative_expression <node> (104)
        on left: 38 39 40 41
        on right: 39 40 41 42 43 44
    additive_expression <node> (105)
        on left: 42 43 44
        on right: 43 44 45 46 47
    shift_expression <node> (106)
        on left: 45 46 47
        on right: 46 47 48 49 50 51 52
    relational_expression <node> (107)
        on left: 48 49 50 51 52
        on right: 49 50 51 52 53 54 55
    equality_expression <node> (108)
        on left: 53 54 55
        on right: 54 55 56 57
    and_expression <node> (109)
        on left: 56 57
        on right: 57 58 59
    xor_expression <node> (110)
        on left: 58 59
        on right: 59 60 61
    or_expression <node> (111)
        on left: 60 61
        on right: 61 62 63
    logical_and_expression <node> (112)
        on left: 62 63
        on right: 63 64 65
    logical_or_expression <node> (113)
        on left: 64 65
        on right: 65 66 67
    conditional_expression <node> (114)
        on left: 66 67
        on right: 67 68 82
    assignment_expression <node> (115)
        on left: 68 69 70 71 72 73 74 75 76 77 78 79
        on right: 24 25 69 70 71 72 73 74 75 76 77 78 79 80 81 147 148 149 150 151 178 179
    expression <node> (116)
        on left: 80 81
        on right: 9 15 17 67 81
    constant_expression <node> (117)
        on left: 82
        on right: 125 126 135
    declaration_specifiers (118)
        on left: 83 84 85 86 87 88 89 90
        on right: 2 84 86 88 90 167 168 169
    storage_class_specifier (119)
        on left: 91 92 93 94 95
        on right: 83 84
    type_specifier (120)
        on left: 96 97 98 99 100 101 102 103 104 105 106 107 108 109
        on right: 85 86 118 119
    struct_or_union_specifier (121)
        on left: 110 111 112
        on right: 107
    struct_or_union (122)
        on left: 113 114
        on right: 110 111 112
    struct_declaration_list (123)
        on left: 115 116
        on right: 110 111 116
    struct_declaration (124)
        on left: 117
        on right: 115 116
    specifier_qualifier_list (125)
        on left: 118 119 120 121
        on right: 117 119 121
    struct_declarator_list (126)
        on left: 122 123
        on right: 117 123
    struct_declarator (127)
        on left: 124 125 126
        on right: 122 123
    enum_specifier (128)
        on left: 127 128 129 130 131
        on right: 108
    enumerator_list (129)
        on left: 132 133
        on right: 128 129 130 131 133
    enumerator (130)
        on left: 134 135
        on right: 132 133
    enumeration_constant (131)
        on left: 136
        on right: 134 135
    type_qualifier (132)
        on left: 137 138 139
        on right: 87 88 120 121 161 162
    function_specifier (133)
        on left: 140
        on right: 89 90
    declarator (134)
        on left: 141 142
        on right: 2 124 126 144 167
    direct_declarator (135)
        on left: 143 144 145 146 147 148 149 150 151 152 153 154 155 156
        on right: 141 142 145 146 147 148 149 150 151 152 153 154 155 156
    pointer (136)
        on left: 157 158 159 160
        on right: 142 159 160 172 174
    type_qualifier_list (137)
        on left: 161 162
        on right: 146 148 150 151 152 158 160 162
    parameter_type_list (138)
        on left: 163 164
        on right: 154 184 185
    parameter_list (139)
        on left: 165 166
        on right: 163 164 166
    parameter_declaration (140)
        on left: 167 168 169
        on right: 165 166
    identifier_list (141)
        on left: 170 171
        on right: 155 171
    abstract_declarator (142)
        on left: 172 173 174
        on right: 169 175
    direct_abstract_declarator (143)
        on left: 175 176 177 178 179 180 181 182 183 184 185
        on right: 173 174 177 179 181 183 185
    typedef_name (144)
        on left: 186
        on right: 109


State 0

    0 $accept: • external_declaration $end
    1 external_declaration: • function_definition
    2 function_definition: • declaration_specifiers declarator compound_statement
   83 declaration_specifiers: • storage_class_specifier
   84                       | • declaration_specifiers storage_class_specifier
   85                       | • type_specifier
   86                       | • declaration_specifiers type_specifier
   87                       | • type_qualifier
   88                       | • declaration_specifiers type_qualifier
   89                       | • function_specifier
   90                       | • declaration_specifiers function_specifier
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • _BOOL
  106               | • _COMPLEX
  107               | • struct_or_union_specifier
  108               | • enum_specifier
  109               | • typedef_name
  110 struct_or_union_specifier: • struct_or_union '{' struct_declaration_list '}'
  111                          | • struct_or_union IDENT '{' struct_declaration_list '}'
  112                          | • struct_or_union IDENT
  113 struct_or_union: • STRUCT
  114                | • UNION
  127 enum_specifier: • ENUM IDENT
  128               | • ENUM '{' enumerator_list '}'
  129               | • ENUM IDENT '{' enumerator_list '}'
  130               | • ENUM '{' enumerator_list ',' '}'
  131               | • ENUM IDENT '{' enumerator_list ',' '}'
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  140 function_specifier: • INLINE
  186 typedef_name: • IDENT

    IDENT     shift, and go to state 1
    AUTO      shift, and go to state 2
    CHAR      shift, and go to state 3
    CONST     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    ENUM      shift, and go to state 6
    EXTERN    shift, and go to state 7
    FLOAT     shift, and go to state 8
    INLINE    shift, and go to state 9
    INT       shift, and go to state 10
    LONG      shift, and go to state 11
    REGISTER  shift, and go to state 12
    RESTRICT  shift, and go to state 13
    SHORT     shift, and go to state 14
    SIGNED    shift, and go to state 15
    STATIC    shift, and go to state 16
    STRUCT    shift, and go to state 17
    TYPEDEF   shift, and go to state 18
    UNION     shift, and go to state 19
    UNSIGNED  shift, and go to state 20
    VOID      shift, and go to state 21
    VOLATILE  shift, and go to state 22
    _BOOL     shift, and go to state 23
    _COMPLEX  shift, and go to state 24

    external_declaration       go to state 25
    function_definition        go to state 26
    declaration_specifiers     go to state 27
    storage_class_specifier    go to state 28
    type_specifier             go to state 29
    struct_or_union_specifier  go to state 30
    struct_or_union            go to state 31
    enum_specifier             go to state 32
    type_qualifier             go to state 33
    function_specifier         go to state 34
    typedef_name               go to state 35


State 1

  186 typedef_name: IDENT •

    $default  reduce using rule 186 (typedef_name)


State 2

   94 storage_class_specifier: AUTO •

    $default  reduce using rule 94 (storage_class_specifier)


State 3

   97 type_specifier: CHAR •

    $default  reduce using rule 97 (type_specifier)


State 4

  137 type_qualifier: CONST •

    $default  reduce using rule 137 (type_qualifier)


State 5

  102 type_specifier: DOUBLE •

    $default  reduce using rule 102 (type_specifier)


State 6

  127 enum_specifier: ENUM • IDENT
  128               | ENUM • '{' enumerator_list '}'
  129               | ENUM • IDENT '{' enumerator_list '}'
  130               | ENUM • '{' enumerator_list ',' '}'
  131               | ENUM • IDENT '{' enumerator_list ',' '}'

    IDENT  shift, and go to state 36
    '{'    shift, and go to state 37


State 7

   92 storage_class_specifier: EXTERN •

    $default  reduce using rule 92 (storage_class_specifier)


State 8

  101 type_specifier: FLOAT •

    $default  reduce using rule 101 (type_specifier)


State 9

  140 function_specifier: INLINE •

    $default  reduce using rule 140 (function_specifier)


State 10

   99 type_specifier: INT •

    $default  reduce using rule 99 (type_specifier)


State 11

  100 type_specifier: LONG •

    $default  reduce using rule 100 (type_specifier)


State 12

   95 storage_class_specifier: REGISTER •

    $default  reduce using rule 95 (storage_class_specifier)


State 13

  138 type_qualifier: RESTRICT •

    $default  reduce using rule 138 (type_qualifier)


State 14

   98 type_specifier: SHORT •

    $default  reduce using rule 98 (type_specifier)


State 15

  103 type_specifier: SIGNED •

    $default  reduce using rule 103 (type_specifier)


State 16

   93 storage_class_specifier: STATIC •

    $default  reduce using rule 93 (storage_class_specifier)


State 17

  113 struct_or_union: STRUCT •

    $default  reduce using rule 113 (struct_or_union)


State 18

   91 storage_class_specifier: TYPEDEF •

    $default  reduce using rule 91 (storage_class_specifier)


State 19

  114 struct_or_union: UNION •

    $default  reduce using rule 114 (struct_or_union)


State 20

  104 type_specifier: UNSIGNED •

    $default  reduce using rule 104 (type_specifier)


State 21

   96 type_specifier: VOID •

    $default  reduce using rule 96 (type_specifier)


State 22

  139 type_qualifier: VOLATILE •

    $default  reduce using rule 139 (type_qualifier)


State 23

  105 type_specifier: _BOOL •

    $default  reduce using rule 105 (type_specifier)


State 24

  106 type_specifier: _COMPLEX •

    $default  reduce using rule 106 (type_specifier)


State 25

    0 $accept: external_declaration • $end

    $end  shift, and go to state 38


State 26

    1 external_declaration: function_definition •

    $default  reduce using rule 1 (external_declaration)


State 27

    2 function_definition: declaration_specifiers • declarator compound_statement
   84 declaration_specifiers: declaration_specifiers • storage_class_specifier
   86                       | declaration_specifiers • type_specifier
   88                       | declaration_specifiers • type_qualifier
   90                       | declaration_specifiers • function_specifier
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • _BOOL
  106               | • _COMPLEX
  107               | • struct_or_union_specifier
  108               | • enum_specifier
  109               | • typedef_name
  110 struct_or_union_specifier: • struct_or_union '{' struct_declaration_list '}'
  111                          | • struct_or_union IDENT '{' struct_declaration_list '}'
  112                          | • struct_or_union IDENT
  113 struct_or_union: • STRUCT
  114                | • UNION
  127 enum_specifier: • ENUM IDENT
  128               | • ENUM '{' enumerator_list '}'
  129               | • ENUM IDENT '{' enumerator_list '}'
  130               | • ENUM '{' enumerator_list ',' '}'
  131               | • ENUM IDENT '{' enumerator_list ',' '}'
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  140 function_specifier: • INLINE
  141 declarator: • direct_declarator
  142           | • pointer direct_declarator
  143 direct_declarator: • IDENT
  144                  | • '(' declarator ')'
  145                  | • direct_declarator '[' ']'
  146                  | • direct_declarator '[' type_qualifier_list ']'
  147                  | • direct_declarator '[' assignment_expression ']'
  148                  | • direct_declarator '[' type_qualifier_list assignment_expression ']'
  149                  | • direct_declarator '[' STATIC assignment_expression ']'
  150                  | • direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'
  151                  | • direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'
  152                  | • direct_declarator '[' type_qualifier_list '*' ']'
  153                  | • direct_declarator '[' '*' ']'
  154                  | • direct_declarator '(' parameter_type_list ')'
  155                  | • direct_declarator '(' identifier_list ')'
  156                  | • direct_declarator '(' ')'
  157 pointer: • '*'
  158        | • '*' type_qualifier_list
  159        | • '*' pointer
  160        | • '*' type_qualifier_list pointer
  186 typedef_name: • IDENT

    IDENT     shift, and go to state 39
    AUTO      shift, and go to state 2
    CHAR      shift, and go to state 3
    CONST     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    ENUM      shift, and go to state 6
    EXTERN    shift, and go to state 7
    FLOAT     shift, and go to state 8
    INLINE    shift, and go to state 9
    INT       shift, and go to state 10
    LONG      shift, and go to state 11
    REGISTER  shift, and go to state 12
    RESTRICT  shift, and go to state 13
    SHORT     shift, and go to state 14
    SIGNED    shift, and go to state 15
    STATIC    shift, and go to state 16
    STRUCT    shift, and go to state 17
    TYPEDEF   shift, and go to state 18
    UNION     shift, and go to state 19
    UNSIGNED  shift, and go to state 20
    VOID      shift, and go to state 21
    VOLATILE  shift, and go to state 22
    _BOOL     shift, and go to state 23
    _COMPLEX  shift, and go to state 24
    '('       shift, and go to state 40
    '*'       shift, and go to state 41

    storage_class_specifier    go to state 42
    type_specifier             go to state 43
    struct_or_union_specifier  go to state 30
    struct_or_union            go to state 31
    enum_specifier             go to state 32
    type_qualifier             go to state 44
    function_specifier         go to state 45
    declarator                 go to state 46
    direct_declarator          go to state 47
    pointer                    go to state 48
    typedef_name               go to state 35


State 28

   83 declaration_specifiers: storage_class_specifier •

    $default  reduce using rule 83 (declaration_specifiers)


State 29

   85 declaration_specifiers: type_specifier •

    $default  reduce using rule 85 (declaration_specifiers)


State 30

  107 type_specifier: struct_or_union_specifier •

    $default  reduce using rule 107 (type_specifier)


State 31

  110 struct_or_union_specifier: struct_or_union • '{' struct_declaration_list '}'
  111                          | struct_or_union • IDENT '{' struct_declaration_list '}'
  112                          | struct_or_union • IDENT

    IDENT  shift, and go to state 49
    '{'    shift, and go to state 50


State 32

  108 type_specifier: enum_specifier •

    $default  reduce using rule 108 (type_specifier)


State 33

   87 declaration_specifiers: type_qualifier •

    $default  reduce using rule 87 (declaration_specifiers)


State 34

   89 declaration_specifiers: function_specifier •

    $default  reduce using rule 89 (declaration_specifiers)


State 35

  109 type_specifier: typedef_name •

    $default  reduce using rule 109 (type_specifier)


State 36

  127 enum_specifier: ENUM IDENT •  [IDENT, AUTO, CHAR, CONST, DOUBLE, ENUM, EXTERN, FLOAT, INLINE, INT, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, STRUCT, TYPEDEF, UNION, UNSIGNED, VOID, VOLATILE, _BOOL, _COMPLEX, '(', ')', '[', ',', '*', ':']
  129               | ENUM IDENT • '{' enumerator_list '}'
  131               | ENUM IDENT • '{' enumerator_list ',' '}'

    '{'  shift, and go to state 51

    $default  reduce using rule 127 (enum_specifier)


State 37

  128 enum_specifier: ENUM '{' • enumerator_list '}'
  130               | ENUM '{' • enumerator_list ',' '}'
  132 enumerator_list: • enumerator
  133                | • enumerator_list ',' enumerator
  134 enumerator: • enumeration_constant
  135           | • enumeration_constant '=' constant_expression
  136 enumeration_constant: • IDENT

    IDENT  shift, and go to state 52

    enumerator_list       go to state 53
    enumerator            go to state 54
    enumeration_constant  go to state 55


State 38

    0 $accept: external_declaration $end •

    $default  accept


State 39

  143 direct_declarator: IDENT •  ['{', ';', '(', ')', '[', ',', ':']
  186 typedef_name: IDENT •  [IDENT, AUTO, CHAR, CONST, DOUBLE, ENUM, EXTERN, FLOAT, INLINE, INT, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, STRUCT, TYPEDEF, UNION, UNSIGNED, VOID, VOLATILE, _BOOL, _COMPLEX, '(', ')', '[', ',', '*', ':']

    '{'       reduce using rule 143 (direct_declarator)
    ';'       reduce using rule 143 (direct_declarator)
    '('       reduce using rule 143 (direct_declarator)
    '('       [reduce using rule 186 (typedef_name)]
    ')'       reduce using rule 143 (direct_declarator)
    ')'       [reduce using rule 186 (typedef_name)]
    '['       reduce using rule 143 (direct_declarator)
    '['       [reduce using rule 186 (typedef_name)]
    ','       reduce using rule 143 (direct_declarator)
    ','       [reduce using rule 186 (typedef_name)]
    ':'       reduce using rule 143 (direct_declarator)
    ':'       [reduce using rule 186 (typedef_name)]
    $default  reduce using rule 186 (typedef_name)

    reduce/reduce conflict on tokens '(', ')', '[', ',', ':':
      143 direct_declarator: IDENT •
      186 typedef_name: IDENT •
      First example: IDENT • compound_statement
      First reduce derivation
        function_definition
        ↳ 2: direct_declarator compound_statement
             ↳ 143: IDENT •
      Second example: declarator compound_statement
      Second reduce derivation
        function_definition
        ↳ 2: declarator compound_statement



State 40

  141 declarator: • direct_declarator
  142           | • pointer direct_declarator
  143 direct_declarator: • IDENT
  144                  | • '(' declarator ')'
  144                  | '(' • declarator ')'
  145                  | • direct_declarator '[' ']'
  146                  | • direct_declarator '[' type_qualifier_list ']'
  147                  | • direct_declarator '[' assignment_expression ']'
  148                  | • direct_declarator '[' type_qualifier_list assignment_expression ']'
  149                  | • direct_declarator '[' STATIC assignment_expression ']'
  150                  | • direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'
  151                  | • direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'
  152                  | • direct_declarator '[' type_qualifier_list '*' ']'
  153                  | • direct_declarator '[' '*' ']'
  154                  | • direct_declarator '(' parameter_type_list ')'
  155                  | • direct_declarator '(' identifier_list ')'
  156                  | • direct_declarator '(' ')'
  157 pointer: • '*'
  158        | • '*' type_qualifier_list
  159        | • '*' pointer
  160        | • '*' type_qualifier_list pointer

    IDENT  shift, and go to state 56
    '('    shift, and go to state 40
    '*'    shift, and go to state 41

    declarator         go to state 57
    direct_declarator  go to state 47
    pointer            go to state 48


State 41

  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  157 pointer: • '*'
  157        | '*' •  [IDENT, '(', ')', '[', ',']
  158        | • '*' type_qualifier_list
  158        | '*' • type_qualifier_list
  159        | • '*' pointer
  159        | '*' • pointer
  160        | • '*' type_qualifier_list pointer
  160        | '*' • type_qualifier_list pointer
  161 type_qualifier_list: • type_qualifier
  162                    | • type_qualifier_list type_qualifier

    CONST     shift, and go to state 4
    RESTRICT  shift, and go to state 13
    VOLATILE  shift, and go to state 22
    '*'       shift, and go to state 41

    $default  reduce using rule 157 (pointer)

    type_qualifier       go to state 58
    pointer              go to state 59
    type_qualifier_list  go to state 60


State 42

   84 declaration_specifiers: declaration_specifiers storage_class_specifier •

    $default  reduce using rule 84 (declaration_specifiers)


State 43

   86 declaration_specifiers: declaration_specifiers type_specifier •

    $default  reduce using rule 86 (declaration_specifiers)


State 44

   88 declaration_specifiers: declaration_specifiers type_qualifier •

    $default  reduce using rule 88 (declaration_specifiers)


State 45

   90 declaration_specifiers: declaration_specifiers function_specifier •

    $default  reduce using rule 90 (declaration_specifiers)


State 46

    2 function_definition: declaration_specifiers declarator • compound_statement
    3 compound_statement: • '{' block_item_list '}' '{' '}'

    '{'  shift, and go to state 61

    compound_statement  go to state 62


State 47

  141 declarator: direct_declarator •  ['{', ';', ')', ',', ':']
  145 direct_declarator: direct_declarator • '[' ']'
  146                  | direct_declarator • '[' type_qualifier_list ']'
  147                  | direct_declarator • '[' assignment_expression ']'
  148                  | direct_declarator • '[' type_qualifier_list assignment_expression ']'
  149                  | direct_declarator • '[' STATIC assignment_expression ']'
  150                  | direct_declarator • '[' STATIC type_qualifier_list assignment_expression ']'
  151                  | direct_declarator • '[' type_qualifier_list STATIC assignment_expression ']'
  152                  | direct_declarator • '[' type_qualifier_list '*' ']'
  153                  | direct_declarator • '[' '*' ']'
  154                  | direct_declarator • '(' parameter_type_list ')'
  155                  | direct_declarator • '(' identifier_list ')'
  156                  | direct_declarator • '(' ')'

    '('  shift, and go to state 63
    '['  shift, and go to state 64

    $default  reduce using rule 141 (declarator)


State 48

  142 declarator: pointer • direct_declarator
  143 direct_declarator: • IDENT
  144                  | • '(' declarator ')'
  145                  | • direct_declarator '[' ']'
  146                  | • direct_declarator '[' type_qualifier_list ']'
  147                  | • direct_declarator '[' assignment_expression ']'
  148                  | • direct_declarator '[' type_qualifier_list assignment_expression ']'
  149                  | • direct_declarator '[' STATIC assignment_expression ']'
  150                  | • direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'
  151                  | • direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'
  152                  | • direct_declarator '[' type_qualifier_list '*' ']'
  153                  | • direct_declarator '[' '*' ']'
  154                  | • direct_declarator '(' parameter_type_list ')'
  155                  | • direct_declarator '(' identifier_list ')'
  156                  | • direct_declarator '(' ')'

    IDENT  shift, and go to state 56
    '('    shift, and go to state 40

    direct_declarator  go to state 65


State 49

  111 struct_or_union_specifier: struct_or_union IDENT • '{' struct_declaration_list '}'
  112                          | struct_or_union IDENT •  [IDENT, AUTO, CHAR, CONST, DOUBLE, ENUM, EXTERN, FLOAT, INLINE, INT, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, STRUCT, TYPEDEF, UNION, UNSIGNED, VOID, VOLATILE, _BOOL, _COMPLEX, '(', ')', '[', ',', '*', ':']

    '{'  shift, and go to state 66

    $default  reduce using rule 112 (struct_or_union_specifier)


State 50

   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • _BOOL
  106               | • _COMPLEX
  107               | • struct_or_union_specifier
  108               | • enum_specifier
  109               | • typedef_name
  110 struct_or_union_specifier: • struct_or_union '{' struct_declaration_list '}'
  110                          | struct_or_union '{' • struct_declaration_list '}'
  111                          | • struct_or_union IDENT '{' struct_declaration_list '}'
  112                          | • struct_or_union IDENT
  113 struct_or_union: • STRUCT
  114                | • UNION
  115 struct_declaration_list: • struct_declaration
  116                        | • struct_declaration_list struct_declaration
  117 struct_declaration: • specifier_qualifier_list struct_declarator_list ';'
  118 specifier_qualifier_list: • type_specifier
  119                         | • specifier_qualifier_list type_specifier
  120                         | • type_qualifier
  121                         | • specifier_qualifier_list type_qualifier
  127 enum_specifier: • ENUM IDENT
  128               | • ENUM '{' enumerator_list '}'
  129               | • ENUM IDENT '{' enumerator_list '}'
  130               | • ENUM '{' enumerator_list ',' '}'
  131               | • ENUM IDENT '{' enumerator_list ',' '}'
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  186 typedef_name: • IDENT

    IDENT     shift, and go to state 1
    CHAR      shift, and go to state 3
    CONST     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    ENUM      shift, and go to state 6
    FLOAT     shift, and go to state 8
    INT       shift, and go to state 10
    LONG      shift, and go to state 11
    RESTRICT  shift, and go to state 13
    SHORT     shift, and go to state 14
    SIGNED    shift, and go to state 15
    STRUCT    shift, and go to state 17
    UNION     shift, and go to state 19
    UNSIGNED  shift, and go to state 20
    VOID      shift, and go to state 21
    VOLATILE  shift, and go to state 22
    _BOOL     shift, and go to state 23
    _COMPLEX  shift, and go to state 24

    type_specifier             go to state 67
    struct_or_union_specifier  go to state 30
    struct_or_union            go to state 31
    struct_declaration_list    go to state 68
    struct_declaration         go to state 69
    specifier_qualifier_list   go to state 70
    enum_specifier             go to state 32
    type_qualifier             go to state 71
    typedef_name               go to state 35


State 51

  129 enum_specifier: ENUM IDENT '{' • enumerator_list '}'
  131               | ENUM IDENT '{' • enumerator_list ',' '}'
  132 enumerator_list: • enumerator
  133                | • enumerator_list ',' enumerator
  134 enumerator: • enumeration_constant
  135           | • enumeration_constant '=' constant_expression
  136 enumeration_constant: • IDENT

    IDENT  shift, and go to state 52

    enumerator_list       go to state 72
    enumerator            go to state 54
    enumeration_constant  go to state 55


State 52

  136 enumeration_constant: IDENT •

    $default  reduce using rule 136 (enumeration_constant)


State 53

  128 enum_specifier: ENUM '{' enumerator_list • '}'
  130               | ENUM '{' enumerator_list • ',' '}'
  133 enumerator_list: enumerator_list • ',' enumerator

    '}'  shift, and go to state 73
    ','  shift, and go to state 74


State 54

  132 enumerator_list: enumerator •

    $default  reduce using rule 132 (enumerator_list)


State 55

  134 enumerator: enumeration_constant •  ['}', ',']
  135           | enumeration_constant • '=' constant_expression

    '='  shift, and go to state 75

    $default  reduce using rule 134 (enumerator)


State 56

  143 direct_declarator: IDENT •

    $default  reduce using rule 143 (direct_declarator)


State 57

  144 direct_declarator: '(' declarator • ')'

    ')'  shift, and go to state 76


State 58

  161 type_qualifier_list: type_qualifier •

    $default  reduce using rule 161 (type_qualifier_list)


State 59

  159 pointer: '*' pointer •

    $default  reduce using rule 159 (pointer)


State 60

  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  157 pointer: • '*'
  158        | • '*' type_qualifier_list
  158        | '*' type_qualifier_list •  [IDENT, '(', ')', '[', ',']
  159        | • '*' pointer
  160        | • '*' type_qualifier_list pointer
  160        | '*' type_qualifier_list • pointer
  162 type_qualifier_list: type_qualifier_list • type_qualifier

    CONST     shift, and go to state 4
    RESTRICT  shift, and go to state 13
    VOLATILE  shift, and go to state 22
    '*'       shift, and go to state 41

    $default  reduce using rule 158 (pointer)

    type_qualifier  go to state 77
    pointer         go to state 78


State 61

    3 compound_statement: • '{' block_item_list '}' '{' '}'
    3                   | '{' • block_item_list '}' '{' '}'
    4 block_item_list: • block_item
    5                | • block_item_list block_item
    6 block_item: • statement
    7 statement: • compound_statement
    8          | • expression_statement
    9 expression_statement: • expression ';'
   10                     | • ';'
   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression
   80 expression: • assignment_expression
   81           | • expression ',' assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '{'        shift, and go to state 61
    ';'        shift, and go to state 87
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    compound_statement         go to state 95
    block_item_list            go to state 96
    block_item                 go to state 97
    statement                  go to state 98
    expression_statement       go to state 99
    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 115
    expression                 go to state 116


State 62

    2 function_definition: declaration_specifiers declarator compound_statement •

    $default  reduce using rule 2 (function_definition)


State 63

   83 declaration_specifiers: • storage_class_specifier
   84                       | • declaration_specifiers storage_class_specifier
   85                       | • type_specifier
   86                       | • declaration_specifiers type_specifier
   87                       | • type_qualifier
   88                       | • declaration_specifiers type_qualifier
   89                       | • function_specifier
   90                       | • declaration_specifiers function_specifier
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • _BOOL
  106               | • _COMPLEX
  107               | • struct_or_union_specifier
  108               | • enum_specifier
  109               | • typedef_name
  110 struct_or_union_specifier: • struct_or_union '{' struct_declaration_list '}'
  111                          | • struct_or_union IDENT '{' struct_declaration_list '}'
  112                          | • struct_or_union IDENT
  113 struct_or_union: • STRUCT
  114                | • UNION
  127 enum_specifier: • ENUM IDENT
  128               | • ENUM '{' enumerator_list '}'
  129               | • ENUM IDENT '{' enumerator_list '}'
  130               | • ENUM '{' enumerator_list ',' '}'
  131               | • ENUM IDENT '{' enumerator_list ',' '}'
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  140 function_specifier: • INLINE
  154 direct_declarator: direct_declarator '(' • parameter_type_list ')'
  155                  | direct_declarator '(' • identifier_list ')'
  156                  | direct_declarator '(' • ')'
  163 parameter_type_list: • parameter_list
  164                    | • parameter_list ',' "..."
  165 parameter_list: • parameter_declaration
  166               | • parameter_list ',' parameter_declaration
  167 parameter_declaration: • declaration_specifiers declarator
  168                      | • declaration_specifiers
  169                      | • declaration_specifiers abstract_declarator
  170 identifier_list: • IDENT
  171                | • identifier_list ',' IDENT
  186 typedef_name: • IDENT

    IDENT     shift, and go to state 117
    AUTO      shift, and go to state 2
    CHAR      shift, and go to state 3
    CONST     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    ENUM      shift, and go to state 6
    EXTERN    shift, and go to state 7
    FLOAT     shift, and go to state 8
    INLINE    shift, and go to state 9
    INT       shift, and go to state 10
    LONG      shift, and go to state 11
    REGISTER  shift, and go to state 12
    RESTRICT  shift, and go to state 13
    SHORT     shift, and go to state 14
    SIGNED    shift, and go to state 15
    STATIC    shift, and go to state 16
    STRUCT    shift, and go to state 17
    TYPEDEF   shift, and go to state 18
    UNION     shift, and go to state 19
    UNSIGNED  shift, and go to state 20
    VOID      shift, and go to state 21
    VOLATILE  shift, and go to state 22
    _BOOL     shift, and go to state 23
    _COMPLEX  shift, and go to state 24
    ')'       shift, and go to state 118

    declaration_specifiers     go to state 119
    storage_class_specifier    go to state 28
    type_specifier             go to state 29
    struct_or_union_specifier  go to state 30
    struct_or_union            go to state 31
    enum_specifier             go to state 32
    type_qualifier             go to state 33
    function_specifier         go to state 34
    parameter_type_list        go to state 120
    parameter_list             go to state 121
    parameter_declaration      go to state 122
    identifier_list            go to state 123
    typedef_name               go to state 35


State 64

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  145 direct_declarator: direct_declarator '[' • ']'
  146                  | direct_declarator '[' • type_qualifier_list ']'
  147                  | direct_declarator '[' • assignment_expression ']'
  148                  | direct_declarator '[' • type_qualifier_list assignment_expression ']'
  149                  | direct_declarator '[' • STATIC assignment_expression ']'
  150                  | direct_declarator '[' • STATIC type_qualifier_list assignment_expression ']'
  151                  | direct_declarator '[' • type_qualifier_list STATIC assignment_expression ']'
  152                  | direct_declarator '[' • type_qualifier_list '*' ']'
  153                  | direct_declarator '[' • '*' ']'
  161 type_qualifier_list: • type_qualifier
  162                    | • type_qualifier_list type_qualifier

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    CONST      shift, and go to state 4
    RESTRICT   shift, and go to state 13
    SIZEOF     shift, and go to state 86
    STATIC     shift, and go to state 124
    VOLATILE   shift, and go to state 22
    '('        shift, and go to state 88
    ']'        shift, and go to state 125
    '&'        shift, and go to state 89
    '*'        shift, and go to state 126
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 127
    type_qualifier             go to state 58
    type_qualifier_list        go to state 128


State 65

  142 declarator: pointer direct_declarator •  ['{', ';', ')', ',', ':']
  145 direct_declarator: direct_declarator • '[' ']'
  146                  | direct_declarator • '[' type_qualifier_list ']'
  147                  | direct_declarator • '[' assignment_expression ']'
  148                  | direct_declarator • '[' type_qualifier_list assignment_expression ']'
  149                  | direct_declarator • '[' STATIC assignment_expression ']'
  150                  | direct_declarator • '[' STATIC type_qualifier_list assignment_expression ']'
  151                  | direct_declarator • '[' type_qualifier_list STATIC assignment_expression ']'
  152                  | direct_declarator • '[' type_qualifier_list '*' ']'
  153                  | direct_declarator • '[' '*' ']'
  154                  | direct_declarator • '(' parameter_type_list ')'
  155                  | direct_declarator • '(' identifier_list ')'
  156                  | direct_declarator • '(' ')'

    '('  shift, and go to state 63
    '['  shift, and go to state 64

    $default  reduce using rule 142 (declarator)


State 66

   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • _BOOL
  106               | • _COMPLEX
  107               | • struct_or_union_specifier
  108               | • enum_specifier
  109               | • typedef_name
  110 struct_or_union_specifier: • struct_or_union '{' struct_declaration_list '}'
  111                          | • struct_or_union IDENT '{' struct_declaration_list '}'
  111                          | struct_or_union IDENT '{' • struct_declaration_list '}'
  112                          | • struct_or_union IDENT
  113 struct_or_union: • STRUCT
  114                | • UNION
  115 struct_declaration_list: • struct_declaration
  116                        | • struct_declaration_list struct_declaration
  117 struct_declaration: • specifier_qualifier_list struct_declarator_list ';'
  118 specifier_qualifier_list: • type_specifier
  119                         | • specifier_qualifier_list type_specifier
  120                         | • type_qualifier
  121                         | • specifier_qualifier_list type_qualifier
  127 enum_specifier: • ENUM IDENT
  128               | • ENUM '{' enumerator_list '}'
  129               | • ENUM IDENT '{' enumerator_list '}'
  130               | • ENUM '{' enumerator_list ',' '}'
  131               | • ENUM IDENT '{' enumerator_list ',' '}'
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  186 typedef_name: • IDENT

    IDENT     shift, and go to state 1
    CHAR      shift, and go to state 3
    CONST     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    ENUM      shift, and go to state 6
    FLOAT     shift, and go to state 8
    INT       shift, and go to state 10
    LONG      shift, and go to state 11
    RESTRICT  shift, and go to state 13
    SHORT     shift, and go to state 14
    SIGNED    shift, and go to state 15
    STRUCT    shift, and go to state 17
    UNION     shift, and go to state 19
    UNSIGNED  shift, and go to state 20
    VOID      shift, and go to state 21
    VOLATILE  shift, and go to state 22
    _BOOL     shift, and go to state 23
    _COMPLEX  shift, and go to state 24

    type_specifier             go to state 67
    struct_or_union_specifier  go to state 30
    struct_or_union            go to state 31
    struct_declaration_list    go to state 129
    struct_declaration         go to state 69
    specifier_qualifier_list   go to state 70
    enum_specifier             go to state 32
    type_qualifier             go to state 71
    typedef_name               go to state 35


State 67

  118 specifier_qualifier_list: type_specifier •

    $default  reduce using rule 118 (specifier_qualifier_list)


State 68

   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • _BOOL
  106               | • _COMPLEX
  107               | • struct_or_union_specifier
  108               | • enum_specifier
  109               | • typedef_name
  110 struct_or_union_specifier: • struct_or_union '{' struct_declaration_list '}'
  110                          | struct_or_union '{' struct_declaration_list • '}'
  111                          | • struct_or_union IDENT '{' struct_declaration_list '}'
  112                          | • struct_or_union IDENT
  113 struct_or_union: • STRUCT
  114                | • UNION
  116 struct_declaration_list: struct_declaration_list • struct_declaration
  117 struct_declaration: • specifier_qualifier_list struct_declarator_list ';'
  118 specifier_qualifier_list: • type_specifier
  119                         | • specifier_qualifier_list type_specifier
  120                         | • type_qualifier
  121                         | • specifier_qualifier_list type_qualifier
  127 enum_specifier: • ENUM IDENT
  128               | • ENUM '{' enumerator_list '}'
  129               | • ENUM IDENT '{' enumerator_list '}'
  130               | • ENUM '{' enumerator_list ',' '}'
  131               | • ENUM IDENT '{' enumerator_list ',' '}'
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  186 typedef_name: • IDENT

    IDENT     shift, and go to state 1
    CHAR      shift, and go to state 3
    CONST     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    ENUM      shift, and go to state 6
    FLOAT     shift, and go to state 8
    INT       shift, and go to state 10
    LONG      shift, and go to state 11
    RESTRICT  shift, and go to state 13
    SHORT     shift, and go to state 14
    SIGNED    shift, and go to state 15
    STRUCT    shift, and go to state 17
    UNION     shift, and go to state 19
    UNSIGNED  shift, and go to state 20
    VOID      shift, and go to state 21
    VOLATILE  shift, and go to state 22
    _BOOL     shift, and go to state 23
    _COMPLEX  shift, and go to state 24
    '}'       shift, and go to state 130

    type_specifier             go to state 67
    struct_or_union_specifier  go to state 30
    struct_or_union            go to state 31
    struct_declaration         go to state 131
    specifier_qualifier_list   go to state 70
    enum_specifier             go to state 32
    type_qualifier             go to state 71
    typedef_name               go to state 35


State 69

  115 struct_declaration_list: struct_declaration •

    $default  reduce using rule 115 (struct_declaration_list)


State 70

   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • _BOOL
  106               | • _COMPLEX
  107               | • struct_or_union_specifier
  108               | • enum_specifier
  109               | • typedef_name
  110 struct_or_union_specifier: • struct_or_union '{' struct_declaration_list '}'
  111                          | • struct_or_union IDENT '{' struct_declaration_list '}'
  112                          | • struct_or_union IDENT
  113 struct_or_union: • STRUCT
  114                | • UNION
  117 struct_declaration: specifier_qualifier_list • struct_declarator_list ';'
  119 specifier_qualifier_list: specifier_qualifier_list • type_specifier
  121                         | specifier_qualifier_list • type_qualifier
  122 struct_declarator_list: • struct_declarator
  123                       | • struct_declarator_list ',' struct_declarator
  124 struct_declarator: • declarator
  125                  | • ':' constant_expression
  126                  | • declarator ':' constant_expression
  127 enum_specifier: • ENUM IDENT
  128               | • ENUM '{' enumerator_list '}'
  129               | • ENUM IDENT '{' enumerator_list '}'
  130               | • ENUM '{' enumerator_list ',' '}'
  131               | • ENUM IDENT '{' enumerator_list ',' '}'
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  141 declarator: • direct_declarator
  142           | • pointer direct_declarator
  143 direct_declarator: • IDENT
  144                  | • '(' declarator ')'
  145                  | • direct_declarator '[' ']'
  146                  | • direct_declarator '[' type_qualifier_list ']'
  147                  | • direct_declarator '[' assignment_expression ']'
  148                  | • direct_declarator '[' type_qualifier_list assignment_expression ']'
  149                  | • direct_declarator '[' STATIC assignment_expression ']'
  150                  | • direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'
  151                  | • direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'
  152                  | • direct_declarator '[' type_qualifier_list '*' ']'
  153                  | • direct_declarator '[' '*' ']'
  154                  | • direct_declarator '(' parameter_type_list ')'
  155                  | • direct_declarator '(' identifier_list ')'
  156                  | • direct_declarator '(' ')'
  157 pointer: • '*'
  158        | • '*' type_qualifier_list
  159        | • '*' pointer
  160        | • '*' type_qualifier_list pointer
  186 typedef_name: • IDENT

    IDENT     shift, and go to state 39
    CHAR      shift, and go to state 3
    CONST     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    ENUM      shift, and go to state 6
    FLOAT     shift, and go to state 8
    INT       shift, and go to state 10
    LONG      shift, and go to state 11
    RESTRICT  shift, and go to state 13
    SHORT     shift, and go to state 14
    SIGNED    shift, and go to state 15
    STRUCT    shift, and go to state 17
    UNION     shift, and go to state 19
    UNSIGNED  shift, and go to state 20
    VOID      shift, and go to state 21
    VOLATILE  shift, and go to state 22
    _BOOL     shift, and go to state 23
    _COMPLEX  shift, and go to state 24
    '('       shift, and go to state 40
    '*'       shift, and go to state 41
    ':'       shift, and go to state 132

    type_specifier             go to state 133
    struct_or_union_specifier  go to state 30
    struct_or_union            go to state 31
    struct_declarator_list     go to state 134
    struct_declarator          go to state 135
    enum_specifier             go to state 32
    type_qualifier             go to state 136
    declarator                 go to state 137
    direct_declarator          go to state 47
    pointer                    go to state 48
    typedef_name               go to state 35


State 71

  120 specifier_qualifier_list: type_qualifier •

    $default  reduce using rule 120 (specifier_qualifier_list)


State 72

  129 enum_specifier: ENUM IDENT '{' enumerator_list • '}'
  131               | ENUM IDENT '{' enumerator_list • ',' '}'
  133 enumerator_list: enumerator_list • ',' enumerator

    '}'  shift, and go to state 138
    ','  shift, and go to state 139


State 73

  128 enum_specifier: ENUM '{' enumerator_list '}' •

    $default  reduce using rule 128 (enum_specifier)


State 74

  130 enum_specifier: ENUM '{' enumerator_list ',' • '}'
  133 enumerator_list: enumerator_list ',' • enumerator
  134 enumerator: • enumeration_constant
  135           | • enumeration_constant '=' constant_expression
  136 enumeration_constant: • IDENT

    IDENT  shift, and go to state 52
    '}'    shift, and go to state 140

    enumerator            go to state 141
    enumeration_constant  go to state 55


State 75

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   82 constant_expression: • conditional_expression
  135 enumerator: enumeration_constant '=' • constant_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 143
    constant_expression        go to state 144


State 76

  144 direct_declarator: '(' declarator ')' •

    $default  reduce using rule 144 (direct_declarator)


State 77

  162 type_qualifier_list: type_qualifier_list type_qualifier •

    $default  reduce using rule 162 (type_qualifier_list)


State 78

  160 pointer: '*' type_qualifier_list pointer •

    $default  reduce using rule 160 (pointer)


State 79

   11 primary_expression: IDENT •

    $default  reduce using rule 11 (primary_expression)


State 80

   12 primary_expression: CHARLIT •

    $default  reduce using rule 12 (primary_expression)


State 81

   13 primary_expression: STRINGLIT •

    $default  reduce using rule 13 (primary_expression)


State 82

   14 primary_expression: NUMBERLIT •

    $default  reduce using rule 14 (primary_expression)


State 83

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   27                 | "++" • unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 145


State 84

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   28                 | "--" • unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 146


State 85

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   36                 | ALIGNOF • unary_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 147


State 86

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   35                 | SIZEOF • unary_expression
   36                 | • ALIGNOF unary_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 148


State 87

   10 expression_statement: ';' •

    $default  reduce using rule 10 (expression_statement)


State 88

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   15                   | '(' • expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression
   80 expression: • assignment_expression
   81           | • expression ',' assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 115
    expression                 go to state 149


State 89

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   29                 | '&' • cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 142
    cast_expression     go to state 150


State 90

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   30                 | '*' • cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 142
    cast_expression     go to state 151


State 91

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   31                 | '+' • cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 142
    cast_expression     go to state 152


State 92

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   32                 | '-' • cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 142
    cast_expression     go to state 153


State 93

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   33                 | '~' • cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 142
    cast_expression     go to state 154


State 94

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   34                 | '!' • cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 142
    cast_expression     go to state 155


State 95

    7 statement: compound_statement •

    $default  reduce using rule 7 (statement)


State 96

    3 compound_statement: • '{' block_item_list '}' '{' '}'
    3                   | '{' block_item_list • '}' '{' '}'
    5 block_item_list: block_item_list • block_item
    6 block_item: • statement
    7 statement: • compound_statement
    8          | • expression_statement
    9 expression_statement: • expression ';'
   10                     | • ';'
   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression
   80 expression: • assignment_expression
   81           | • expression ',' assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '{'        shift, and go to state 61
    '}'        shift, and go to state 156
    ';'        shift, and go to state 87
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    compound_statement         go to state 95
    block_item                 go to state 157
    statement                  go to state 98
    expression_statement       go to state 99
    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 115
    expression                 go to state 116


State 97

    4 block_item_list: block_item •

    $default  reduce using rule 4 (block_item_list)


State 98

    6 block_item: statement •

    $default  reduce using rule 6 (block_item)


State 99

    8 statement: expression_statement •

    $default  reduce using rule 8 (statement)


State 100

   16 postfix_expression: primary_expression •

    $default  reduce using rule 16 (postfix_expression)


State 101

   17 postfix_expression: postfix_expression • '[' expression ']'
   18                   | postfix_expression • '(' ')'
   19                   | postfix_expression • '(' argument_expression_list ')'
   20                   | postfix_expression • '.' IDENT
   21                   | postfix_expression • "->" IDENT
   22                   | postfix_expression • "++"
   23                   | postfix_expression • "--"
   26 unary_expression: postfix_expression •  ["<<", ">>", "<=", "==", "!=", "&&", "||", "*=", "/=", "%=", "+=", "-=", "<<=", ">>=", "&=", "|=", "^=", '}', ';', ')', ']', ',', '&', '*', '+', '-', '/', '%', '<', '>', '^', '|', '?', ':', '=']

    "->"  shift, and go to state 158
    "++"  shift, and go to state 159
    "--"  shift, and go to state 160
    '('   shift, and go to state 161
    '['   shift, and go to state 162
    '.'   shift, and go to state 163

    $default  reduce using rule 26 (unary_expression)


State 102

   37 cast_expression: unary_expression •  ["<<", ">>", "<=", "==", "!=", "&&", "||", ';', ')', ']', ',', '&', '*', '+', '-', '/', '%', '<', '>', '^', '|', '?', ':']
   69 assignment_expression: unary_expression • '=' assignment_expression
   70                      | unary_expression • "*=" assignment_expression
   71                      | unary_expression • "/=" assignment_expression
   72                      | unary_expression • "%=" assignment_expression
   73                      | unary_expression • "+=" assignment_expression
   74                      | unary_expression • "-=" assignment_expression
   75                      | unary_expression • "<<=" assignment_expression
   76                      | unary_expression • ">>=" assignment_expression
   77                      | unary_expression • "&=" assignment_expression
   78                      | unary_expression • "^=" assignment_expression
   79                      | unary_expression • "|=" assignment_expression

    "*="   shift, and go to state 164
    "/="   shift, and go to state 165
    "%="   shift, and go to state 166
    "+="   shift, and go to state 167
    "-="   shift, and go to state 168
    "<<="  shift, and go to state 169
    ">>="  shift, and go to state 170
    "&="   shift, and go to state 171
    "|="   shift, and go to state 172
    "^="   shift, and go to state 173
    '='    shift, and go to state 174

    $default  reduce using rule 37 (cast_expression)


State 103

   38 multiplicative_expression: cast_expression •

    $default  reduce using rule 38 (multiplicative_expression)


State 104

   39 multiplicative_expression: multiplicative_expression • '*' cast_expression
   40                          | multiplicative_expression • '/' cast_expression
   41                          | multiplicative_expression • '%' cast_expression
   42 additive_expression: multiplicative_expression •  ["<<", ">>", "<=", "==", "!=", "&&", "||", '}', ';', ')', ']', ',', '&', '+', '-', '<', '>', '^', '|', '?', ':']

    '*'  shift, and go to state 175
    '/'  shift, and go to state 176
    '%'  shift, and go to state 177

    $default  reduce using rule 42 (additive_expression)


State 105

   43 additive_expression: additive_expression • '+' multiplicative_expression
   44                    | additive_expression • '-' multiplicative_expression
   45 shift_expression: additive_expression •  ["<<", ">>", "<=", "==", "!=", "&&", "||", '}', ';', ')', ']', ',', '&', '<', '>', '^', '|', '?', ':']

    '+'  shift, and go to state 178
    '-'  shift, and go to state 179

    $default  reduce using rule 45 (shift_expression)


State 106

   46 shift_expression: shift_expression • "<<" additive_expression
   47                 | shift_expression • ">>" additive_expression
   48 relational_expression: shift_expression •  ["<=", "==", "!=", "&&", "||", '}', ';', ')', ']', ',', '&', '<', '>', '^', '|', '?', ':']

    "<<"  shift, and go to state 180
    ">>"  shift, and go to state 181

    $default  reduce using rule 48 (relational_expression)


State 107

   49 relational_expression: relational_expression • '<' shift_expression
   50                      | relational_expression • "<=" shift_expression
   51                      | relational_expression • '>' shift_expression
   52                      | relational_expression • "<=" shift_expression
   53 equality_expression: relational_expression •  ["==", "!=", "&&", "||", '}', ';', ')', ']', ',', '&', '^', '|', '?', ':']

    "<="  shift, and go to state 182
    '<'   shift, and go to state 183
    '>'   shift, and go to state 184

    $default  reduce using rule 53 (equality_expression)


State 108

   54 equality_expression: equality_expression • "==" relational_expression
   55                    | equality_expression • "!=" relational_expression
   56 and_expression: equality_expression •  ["&&", "||", '}', ';', ')', ']', ',', '&', '^', '|', '?', ':']

    "=="  shift, and go to state 185
    "!="  shift, and go to state 186

    $default  reduce using rule 56 (and_expression)


State 109

   57 and_expression: and_expression • '&' equality_expression
   58 xor_expression: and_expression •  ["&&", "||", '}', ';', ')', ']', ',', '^', '|', '?', ':']

    '&'  shift, and go to state 187

    $default  reduce using rule 58 (xor_expression)


State 110

   59 xor_expression: xor_expression • '^' and_expression
   60 or_expression: xor_expression •  ["&&", "||", '}', ';', ')', ']', ',', '|', '?', ':']

    '^'  shift, and go to state 188

    $default  reduce using rule 60 (or_expression)


State 111

   61 or_expression: or_expression • '|' xor_expression
   62 logical_and_expression: or_expression •  ["&&", "||", '}', ';', ')', ']', ',', '?', ':']

    '|'  shift, and go to state 189

    $default  reduce using rule 62 (logical_and_expression)


State 112

   63 logical_and_expression: logical_and_expression • "&&" or_expression
   64 logical_or_expression: logical_and_expression •  ["||", '}', ';', ')', ']', ',', '?', ':']

    "&&"  shift, and go to state 190

    $default  reduce using rule 64 (logical_or_expression)


State 113

   65 logical_or_expression: logical_or_expression • "||" logical_and_expression
   66 conditional_expression: logical_or_expression •  ['}', ';', ')', ']', ',', ':']
   67                       | logical_or_expression • '?' expression ':' conditional_expression

    "||"  shift, and go to state 191
    '?'   shift, and go to state 192

    $default  reduce using rule 66 (conditional_expression)


State 114

   68 assignment_expression: conditional_expression •

    $default  reduce using rule 68 (assignment_expression)


State 115

   80 expression: assignment_expression •

    $default  reduce using rule 80 (expression)


State 116

    9 expression_statement: expression • ';'
   81 expression: expression • ',' assignment_expression

    ';'  shift, and go to state 193
    ','  shift, and go to state 194


State 117

  170 identifier_list: IDENT •  [')', ',']
  186 typedef_name: IDENT •  [IDENT, AUTO, CHAR, CONST, DOUBLE, ENUM, EXTERN, FLOAT, INLINE, INT, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, STRUCT, TYPEDEF, UNION, UNSIGNED, VOID, VOLATILE, _BOOL, _COMPLEX, '(', ')', '[', ',', '*']

    ')'       reduce using rule 170 (identifier_list)
    ')'       [reduce using rule 186 (typedef_name)]
    ','       reduce using rule 170 (identifier_list)
    ','       [reduce using rule 186 (typedef_name)]
    $default  reduce using rule 186 (typedef_name)

    reduce/reduce conflict on tokens ')', ',':
      170 identifier_list: IDENT •
      186 typedef_name: IDENT •
      Example: direct_declarator '(' IDENT • ')'
      First reduce derivation
        direct_declarator
        ↳ 155: direct_declarator '(' identifier_list ')'
                                     ↳ 170: IDENT •
      Second reduce derivation
        direct_declarator
        ↳ 154: direct_declarator '(' parameter_type_list                              ')'
                                     ↳ 163: parameter_list
                                            ↳ 165: parameter_declaration
                                                   ↳ 168: declaration_specifiers
                                                          ↳ 85: type_specifier
                                                                ↳ 109: typedef_name
                                                                       ↳ 186: IDENT •



State 118

  156 direct_declarator: direct_declarator '(' ')' •

    $default  reduce using rule 156 (direct_declarator)


State 119

   84 declaration_specifiers: declaration_specifiers • storage_class_specifier
   86                       | declaration_specifiers • type_specifier
   88                       | declaration_specifiers • type_qualifier
   90                       | declaration_specifiers • function_specifier
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • _BOOL
  106               | • _COMPLEX
  107               | • struct_or_union_specifier
  108               | • enum_specifier
  109               | • typedef_name
  110 struct_or_union_specifier: • struct_or_union '{' struct_declaration_list '}'
  111                          | • struct_or_union IDENT '{' struct_declaration_list '}'
  112                          | • struct_or_union IDENT
  113 struct_or_union: • STRUCT
  114                | • UNION
  127 enum_specifier: • ENUM IDENT
  128               | • ENUM '{' enumerator_list '}'
  129               | • ENUM IDENT '{' enumerator_list '}'
  130               | • ENUM '{' enumerator_list ',' '}'
  131               | • ENUM IDENT '{' enumerator_list ',' '}'
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  140 function_specifier: • INLINE
  141 declarator: • direct_declarator
  142           | • pointer direct_declarator
  143 direct_declarator: • IDENT
  144                  | • '(' declarator ')'
  145                  | • direct_declarator '[' ']'
  146                  | • direct_declarator '[' type_qualifier_list ']'
  147                  | • direct_declarator '[' assignment_expression ']'
  148                  | • direct_declarator '[' type_qualifier_list assignment_expression ']'
  149                  | • direct_declarator '[' STATIC assignment_expression ']'
  150                  | • direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'
  151                  | • direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'
  152                  | • direct_declarator '[' type_qualifier_list '*' ']'
  153                  | • direct_declarator '[' '*' ']'
  154                  | • direct_declarator '(' parameter_type_list ')'
  155                  | • direct_declarator '(' identifier_list ')'
  156                  | • direct_declarator '(' ')'
  157 pointer: • '*'
  158        | • '*' type_qualifier_list
  159        | • '*' pointer
  160        | • '*' type_qualifier_list pointer
  167 parameter_declaration: declaration_specifiers • declarator
  168                      | declaration_specifiers •  [')', ',']
  169                      | declaration_specifiers • abstract_declarator
  172 abstract_declarator: • pointer
  173                    | • direct_abstract_declarator
  174                    | • pointer direct_abstract_declarator
  175 direct_abstract_declarator: • '(' abstract_declarator ')'
  176                           | • '[' ']'
  177                           | • direct_abstract_declarator '[' ']'
  178                           | • '[' assignment_expression ']'
  179                           | • direct_abstract_declarator '[' assignment_expression ']'
  180                           | • '[' '*' ']'
  181                           | • direct_abstract_declarator '[' '*' ']'
  182                           | • '(' ')'
  183                           | • direct_abstract_declarator '(' ')'
  184                           | • '(' parameter_type_list ')'
  185                           | • direct_abstract_declarator '(' parameter_type_list ')'
  186 typedef_name: • IDENT

    IDENT     shift, and go to state 39
    AUTO      shift, and go to state 2
    CHAR      shift, and go to state 3
    CONST     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    ENUM      shift, and go to state 6
    EXTERN    shift, and go to state 7
    FLOAT     shift, and go to state 8
    INLINE    shift, and go to state 9
    INT       shift, and go to state 10
    LONG      shift, and go to state 11
    REGISTER  shift, and go to state 12
    RESTRICT  shift, and go to state 13
    SHORT     shift, and go to state 14
    SIGNED    shift, and go to state 15
    STATIC    shift, and go to state 16
    STRUCT    shift, and go to state 17
    TYPEDEF   shift, and go to state 18
    UNION     shift, and go to state 19
    UNSIGNED  shift, and go to state 20
    VOID      shift, and go to state 21
    VOLATILE  shift, and go to state 22
    _BOOL     shift, and go to state 23
    _COMPLEX  shift, and go to state 24
    '('       shift, and go to state 195
    '['       shift, and go to state 196
    '*'       shift, and go to state 41

    $default  reduce using rule 168 (parameter_declaration)

    storage_class_specifier     go to state 42
    type_specifier              go to state 43
    struct_or_union_specifier   go to state 30
    struct_or_union             go to state 31
    enum_specifier              go to state 32
    type_qualifier              go to state 44
    function_specifier          go to state 45
    declarator                  go to state 197
    direct_declarator           go to state 47
    pointer                     go to state 198
    abstract_declarator         go to state 199
    direct_abstract_declarator  go to state 200
    typedef_name                go to state 35


State 120

  154 direct_declarator: direct_declarator '(' parameter_type_list • ')'

    ')'  shift, and go to state 201


State 121

  163 parameter_type_list: parameter_list •  [')']
  164                    | parameter_list • ',' "..."
  166 parameter_list: parameter_list • ',' parameter_declaration

    ','  shift, and go to state 202

    $default  reduce using rule 163 (parameter_type_list)


State 122

  165 parameter_list: parameter_declaration •

    $default  reduce using rule 165 (parameter_list)


State 123

  155 direct_declarator: direct_declarator '(' identifier_list • ')'
  171 identifier_list: identifier_list • ',' IDENT

    ')'  shift, and go to state 203
    ','  shift, and go to state 204


State 124

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  149 direct_declarator: direct_declarator '[' STATIC • assignment_expression ']'
  150                  | direct_declarator '[' STATIC • type_qualifier_list assignment_expression ']'
  161 type_qualifier_list: • type_qualifier
  162                    | • type_qualifier_list type_qualifier

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    CONST      shift, and go to state 4
    RESTRICT   shift, and go to state 13
    SIZEOF     shift, and go to state 86
    VOLATILE   shift, and go to state 22
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 205
    type_qualifier             go to state 58
    type_qualifier_list        go to state 206


State 125

  145 direct_declarator: direct_declarator '[' ']' •

    $default  reduce using rule 145 (direct_declarator)


State 126

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   30                 | '*' • cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
  153 direct_declarator: direct_declarator '[' '*' • ']'

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    ']'        shift, and go to state 207
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 142
    cast_expression     go to state 151


State 127

  147 direct_declarator: direct_declarator '[' assignment_expression • ']'

    ']'  shift, and go to state 208


State 128

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  146 direct_declarator: direct_declarator '[' type_qualifier_list • ']'
  148                  | direct_declarator '[' type_qualifier_list • assignment_expression ']'
  151                  | direct_declarator '[' type_qualifier_list • STATIC assignment_expression ']'
  152                  | direct_declarator '[' type_qualifier_list • '*' ']'
  162 type_qualifier_list: type_qualifier_list • type_qualifier

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    CONST      shift, and go to state 4
    RESTRICT   shift, and go to state 13
    SIZEOF     shift, and go to state 86
    STATIC     shift, and go to state 209
    VOLATILE   shift, and go to state 22
    '('        shift, and go to state 88
    ']'        shift, and go to state 210
    '&'        shift, and go to state 89
    '*'        shift, and go to state 211
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 212
    type_qualifier             go to state 77


State 129

   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • _BOOL
  106               | • _COMPLEX
  107               | • struct_or_union_specifier
  108               | • enum_specifier
  109               | • typedef_name
  110 struct_or_union_specifier: • struct_or_union '{' struct_declaration_list '}'
  111                          | • struct_or_union IDENT '{' struct_declaration_list '}'
  111                          | struct_or_union IDENT '{' struct_declaration_list • '}'
  112                          | • struct_or_union IDENT
  113 struct_or_union: • STRUCT
  114                | • UNION
  116 struct_declaration_list: struct_declaration_list • struct_declaration
  117 struct_declaration: • specifier_qualifier_list struct_declarator_list ';'
  118 specifier_qualifier_list: • type_specifier
  119                         | • specifier_qualifier_list type_specifier
  120                         | • type_qualifier
  121                         | • specifier_qualifier_list type_qualifier
  127 enum_specifier: • ENUM IDENT
  128               | • ENUM '{' enumerator_list '}'
  129               | • ENUM IDENT '{' enumerator_list '}'
  130               | • ENUM '{' enumerator_list ',' '}'
  131               | • ENUM IDENT '{' enumerator_list ',' '}'
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  186 typedef_name: • IDENT

    IDENT     shift, and go to state 1
    CHAR      shift, and go to state 3
    CONST     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    ENUM      shift, and go to state 6
    FLOAT     shift, and go to state 8
    INT       shift, and go to state 10
    LONG      shift, and go to state 11
    RESTRICT  shift, and go to state 13
    SHORT     shift, and go to state 14
    SIGNED    shift, and go to state 15
    STRUCT    shift, and go to state 17
    UNION     shift, and go to state 19
    UNSIGNED  shift, and go to state 20
    VOID      shift, and go to state 21
    VOLATILE  shift, and go to state 22
    _BOOL     shift, and go to state 23
    _COMPLEX  shift, and go to state 24
    '}'       shift, and go to state 213

    type_specifier             go to state 67
    struct_or_union_specifier  go to state 30
    struct_or_union            go to state 31
    struct_declaration         go to state 131
    specifier_qualifier_list   go to state 70
    enum_specifier             go to state 32
    type_qualifier             go to state 71
    typedef_name               go to state 35


State 130

  110 struct_or_union_specifier: struct_or_union '{' struct_declaration_list '}' •

    $default  reduce using rule 110 (struct_or_union_specifier)


State 131

  116 struct_declaration_list: struct_declaration_list struct_declaration •

    $default  reduce using rule 116 (struct_declaration_list)


State 132

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   82 constant_expression: • conditional_expression
  125 struct_declarator: ':' • constant_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 143
    constant_expression        go to state 214


State 133

  119 specifier_qualifier_list: specifier_qualifier_list type_specifier •

    $default  reduce using rule 119 (specifier_qualifier_list)


State 134

  117 struct_declaration: specifier_qualifier_list struct_declarator_list • ';'
  123 struct_declarator_list: struct_declarator_list • ',' struct_declarator

    ';'  shift, and go to state 215
    ','  shift, and go to state 216


State 135

  122 struct_declarator_list: struct_declarator •

    $default  reduce using rule 122 (struct_declarator_list)


State 136

  121 specifier_qualifier_list: specifier_qualifier_list type_qualifier •

    $default  reduce using rule 121 (specifier_qualifier_list)


State 137

  124 struct_declarator: declarator •  [';', ',']
  126                  | declarator • ':' constant_expression

    ':'  shift, and go to state 217

    $default  reduce using rule 124 (struct_declarator)


State 138

  129 enum_specifier: ENUM IDENT '{' enumerator_list '}' •

    $default  reduce using rule 129 (enum_specifier)


State 139

  131 enum_specifier: ENUM IDENT '{' enumerator_list ',' • '}'
  133 enumerator_list: enumerator_list ',' • enumerator
  134 enumerator: • enumeration_constant
  135           | • enumeration_constant '=' constant_expression
  136 enumeration_constant: • IDENT

    IDENT  shift, and go to state 52
    '}'    shift, and go to state 218

    enumerator            go to state 141
    enumeration_constant  go to state 55


State 140

  130 enum_specifier: ENUM '{' enumerator_list ',' '}' •

    $default  reduce using rule 130 (enum_specifier)


State 141

  133 enumerator_list: enumerator_list ',' enumerator •

    $default  reduce using rule 133 (enumerator_list)


State 142

   37 cast_expression: unary_expression •

    $default  reduce using rule 37 (cast_expression)


State 143

   82 constant_expression: conditional_expression •

    $default  reduce using rule 82 (constant_expression)


State 144

  135 enumerator: enumeration_constant '=' constant_expression •

    $default  reduce using rule 135 (enumerator)


State 145

   27 unary_expression: "++" unary_expression •

    $default  reduce using rule 27 (unary_expression)


State 146

   28 unary_expression: "--" unary_expression •

    $default  reduce using rule 28 (unary_expression)


State 147

   36 unary_expression: ALIGNOF unary_expression •

    $default  reduce using rule 36 (unary_expression)


State 148

   35 unary_expression: SIZEOF unary_expression •

    $default  reduce using rule 35 (unary_expression)


State 149

   15 primary_expression: '(' expression • ')'
   81 expression: expression • ',' assignment_expression

    ')'  shift, and go to state 219
    ','  shift, and go to state 194


State 150

   29 unary_expression: '&' cast_expression •

    $default  reduce using rule 29 (unary_expression)


State 151

   30 unary_expression: '*' cast_expression •

    $default  reduce using rule 30 (unary_expression)


State 152

   31 unary_expression: '+' cast_expression •

    $default  reduce using rule 31 (unary_expression)


State 153

   32 unary_expression: '-' cast_expression •

    $default  reduce using rule 32 (unary_expression)


State 154

   33 unary_expression: '~' cast_expression •

    $default  reduce using rule 33 (unary_expression)


State 155

   34 unary_expression: '!' cast_expression •

    $default  reduce using rule 34 (unary_expression)


State 156

    3 compound_statement: '{' block_item_list '}' • '{' '}'

    '{'  shift, and go to state 220


State 157

    5 block_item_list: block_item_list block_item •

    $default  reduce using rule 5 (block_item_list)


State 158

   21 postfix_expression: postfix_expression "->" • IDENT

    IDENT  shift, and go to state 221


State 159

   22 postfix_expression: postfix_expression "++" •

    $default  reduce using rule 22 (postfix_expression)


State 160

   23 postfix_expression: postfix_expression "--" •

    $default  reduce using rule 23 (postfix_expression)


State 161

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   18                   | postfix_expression '(' • ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   19                   | postfix_expression '(' • argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   24 argument_expression_list: • assignment_expression
   25                         | • argument_expression_list ',' assignment_expression
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    ')'        shift, and go to state 222
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    argument_expression_list   go to state 223
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 224


State 162

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   17                   | postfix_expression '[' • expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression
   80 expression: • assignment_expression
   81           | • expression ',' assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 115
    expression                 go to state 225


State 163

   20 postfix_expression: postfix_expression '.' • IDENT

    IDENT  shift, and go to state 226


State 164

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   70                      | unary_expression "*=" • assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 227


State 165

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   71                      | unary_expression "/=" • assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 228


State 166

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   72                      | unary_expression "%=" • assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 229


State 167

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   73                      | unary_expression "+=" • assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 230


State 168

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   74                      | unary_expression "-=" • assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 231


State 169

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   75                      | unary_expression "<<=" • assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 232


State 170

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   76                      | unary_expression ">>=" • assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 233


State 171

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   77                      | unary_expression "&=" • assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 234


State 172

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression
   79                      | unary_expression "|=" • assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 235


State 173

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   78                      | unary_expression "^=" • assignment_expression
   79                      | • unary_expression "|=" assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 236


State 174

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   69                      | unary_expression '=' • assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 237


State 175

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   39 multiplicative_expression: multiplicative_expression '*' • cast_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 142
    cast_expression     go to state 238


State 176

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   40 multiplicative_expression: multiplicative_expression '/' • cast_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 142
    cast_expression     go to state 239


State 177

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   41 multiplicative_expression: multiplicative_expression '%' • cast_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 142
    cast_expression     go to state 240


State 178

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   43 additive_expression: additive_expression '+' • multiplicative_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 241


State 179

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   44 additive_expression: additive_expression '-' • multiplicative_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 242


State 180

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   46 shift_expression: shift_expression "<<" • additive_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 243


State 181

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   47 shift_expression: shift_expression ">>" • additive_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 244


State 182

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   50 relational_expression: relational_expression "<=" • shift_expression
   52                      | relational_expression "<=" • shift_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 245


State 183

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   49 relational_expression: relational_expression '<' • shift_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 246


State 184

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   51 relational_expression: relational_expression '>' • shift_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 247


State 185

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   54 equality_expression: equality_expression "==" • relational_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 248


State 186

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   55 equality_expression: equality_expression "!=" • relational_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 249


State 187

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   57 and_expression: and_expression '&' • equality_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 250


State 188

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   59 xor_expression: xor_expression '^' • and_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 251


State 189

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   61 or_expression: or_expression '|' • xor_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 252


State 190

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   63 logical_and_expression: logical_and_expression "&&" • or_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 253


State 191

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   65 logical_or_expression: logical_or_expression "||" • logical_and_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 254


State 192

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   67                       | logical_or_expression '?' • expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression
   80 expression: • assignment_expression
   81           | • expression ',' assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 115
    expression                 go to state 255


State 193

    9 expression_statement: expression ';' •

    $default  reduce using rule 9 (expression_statement)


State 194

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression
   81 expression: expression ',' • assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 256


State 195

   83 declaration_specifiers: • storage_class_specifier
   84                       | • declaration_specifiers storage_class_specifier
   85                       | • type_specifier
   86                       | • declaration_specifiers type_specifier
   87                       | • type_qualifier
   88                       | • declaration_specifiers type_qualifier
   89                       | • function_specifier
   90                       | • declaration_specifiers function_specifier
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • _BOOL
  106               | • _COMPLEX
  107               | • struct_or_union_specifier
  108               | • enum_specifier
  109               | • typedef_name
  110 struct_or_union_specifier: • struct_or_union '{' struct_declaration_list '}'
  111                          | • struct_or_union IDENT '{' struct_declaration_list '}'
  112                          | • struct_or_union IDENT
  113 struct_or_union: • STRUCT
  114                | • UNION
  127 enum_specifier: • ENUM IDENT
  128               | • ENUM '{' enumerator_list '}'
  129               | • ENUM IDENT '{' enumerator_list '}'
  130               | • ENUM '{' enumerator_list ',' '}'
  131               | • ENUM IDENT '{' enumerator_list ',' '}'
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  140 function_specifier: • INLINE
  141 declarator: • direct_declarator
  142           | • pointer direct_declarator
  143 direct_declarator: • IDENT
  144                  | • '(' declarator ')'
  144                  | '(' • declarator ')'
  145                  | • direct_declarator '[' ']'
  146                  | • direct_declarator '[' type_qualifier_list ']'
  147                  | • direct_declarator '[' assignment_expression ']'
  148                  | • direct_declarator '[' type_qualifier_list assignment_expression ']'
  149                  | • direct_declarator '[' STATIC assignment_expression ']'
  150                  | • direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'
  151                  | • direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'
  152                  | • direct_declarator '[' type_qualifier_list '*' ']'
  153                  | • direct_declarator '[' '*' ']'
  154                  | • direct_declarator '(' parameter_type_list ')'
  155                  | • direct_declarator '(' identifier_list ')'
  156                  | • direct_declarator '(' ')'
  157 pointer: • '*'
  158        | • '*' type_qualifier_list
  159        | • '*' pointer
  160        | • '*' type_qualifier_list pointer
  163 parameter_type_list: • parameter_list
  164                    | • parameter_list ',' "..."
  165 parameter_list: • parameter_declaration
  166               | • parameter_list ',' parameter_declaration
  167 parameter_declaration: • declaration_specifiers declarator
  168                      | • declaration_specifiers
  169                      | • declaration_specifiers abstract_declarator
  172 abstract_declarator: • pointer
  173                    | • direct_abstract_declarator
  174                    | • pointer direct_abstract_declarator
  175 direct_abstract_declarator: • '(' abstract_declarator ')'
  175                           | '(' • abstract_declarator ')'
  176                           | • '[' ']'
  177                           | • direct_abstract_declarator '[' ']'
  178                           | • '[' assignment_expression ']'
  179                           | • direct_abstract_declarator '[' assignment_expression ']'
  180                           | • '[' '*' ']'
  181                           | • direct_abstract_declarator '[' '*' ']'
  182                           | • '(' ')'
  182                           | '(' • ')'
  183                           | • direct_abstract_declarator '(' ')'
  184                           | • '(' parameter_type_list ')'
  184                           | '(' • parameter_type_list ')'
  185                           | • direct_abstract_declarator '(' parameter_type_list ')'
  186 typedef_name: • IDENT

    IDENT     shift, and go to state 39
    AUTO      shift, and go to state 2
    CHAR      shift, and go to state 3
    CONST     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    ENUM      shift, and go to state 6
    EXTERN    shift, and go to state 7
    FLOAT     shift, and go to state 8
    INLINE    shift, and go to state 9
    INT       shift, and go to state 10
    LONG      shift, and go to state 11
    REGISTER  shift, and go to state 12
    RESTRICT  shift, and go to state 13
    SHORT     shift, and go to state 14
    SIGNED    shift, and go to state 15
    STATIC    shift, and go to state 16
    STRUCT    shift, and go to state 17
    TYPEDEF   shift, and go to state 18
    UNION     shift, and go to state 19
    UNSIGNED  shift, and go to state 20
    VOID      shift, and go to state 21
    VOLATILE  shift, and go to state 22
    _BOOL     shift, and go to state 23
    _COMPLEX  shift, and go to state 24
    '('       shift, and go to state 195
    ')'       shift, and go to state 257
    '['       shift, and go to state 196
    '*'       shift, and go to state 41

    declaration_specifiers      go to state 119
    storage_class_specifier     go to state 28
    type_specifier              go to state 29
    struct_or_union_specifier   go to state 30
    struct_or_union             go to state 31
    enum_specifier              go to state 32
    type_qualifier              go to state 33
    function_specifier          go to state 34
    declarator                  go to state 57
    direct_declarator           go to state 47
    pointer                     go to state 198
    parameter_type_list         go to state 258
    parameter_list              go to state 121
    parameter_declaration       go to state 122
    abstract_declarator         go to state 259
    direct_abstract_declarator  go to state 200
    typedef_name                go to state 35


State 196

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression
  176 direct_abstract_declarator: '[' • ']'
  178                           | '[' • assignment_expression ']'
  180                           | '[' • '*' ']'

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    ']'        shift, and go to state 260
    '&'        shift, and go to state 89
    '*'        shift, and go to state 261
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 262


State 197

  167 parameter_declaration: declaration_specifiers declarator •

    $default  reduce using rule 167 (parameter_declaration)


State 198

  142 declarator: pointer • direct_declarator
  143 direct_declarator: • IDENT
  144                  | • '(' declarator ')'
  145                  | • direct_declarator '[' ']'
  146                  | • direct_declarator '[' type_qualifier_list ']'
  147                  | • direct_declarator '[' assignment_expression ']'
  148                  | • direct_declarator '[' type_qualifier_list assignment_expression ']'
  149                  | • direct_declarator '[' STATIC assignment_expression ']'
  150                  | • direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'
  151                  | • direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'
  152                  | • direct_declarator '[' type_qualifier_list '*' ']'
  153                  | • direct_declarator '[' '*' ']'
  154                  | • direct_declarator '(' parameter_type_list ')'
  155                  | • direct_declarator '(' identifier_list ')'
  156                  | • direct_declarator '(' ')'
  172 abstract_declarator: pointer •  [')', ',']
  174                    | pointer • direct_abstract_declarator
  175 direct_abstract_declarator: • '(' abstract_declarator ')'
  176                           | • '[' ']'
  177                           | • direct_abstract_declarator '[' ']'
  178                           | • '[' assignment_expression ']'
  179                           | • direct_abstract_declarator '[' assignment_expression ']'
  180                           | • '[' '*' ']'
  181                           | • direct_abstract_declarator '[' '*' ']'
  182                           | • '(' ')'
  183                           | • direct_abstract_declarator '(' ')'
  184                           | • '(' parameter_type_list ')'
  185                           | • direct_abstract_declarator '(' parameter_type_list ')'

    IDENT  shift, and go to state 56
    '('    shift, and go to state 195
    '['    shift, and go to state 196

    $default  reduce using rule 172 (abstract_declarator)

    direct_declarator           go to state 65
    direct_abstract_declarator  go to state 263


State 199

  169 parameter_declaration: declaration_specifiers abstract_declarator •

    $default  reduce using rule 169 (parameter_declaration)


State 200

  173 abstract_declarator: direct_abstract_declarator •  [')', ',']
  177 direct_abstract_declarator: direct_abstract_declarator • '[' ']'
  179                           | direct_abstract_declarator • '[' assignment_expression ']'
  181                           | direct_abstract_declarator • '[' '*' ']'
  183                           | direct_abstract_declarator • '(' ')'
  185                           | direct_abstract_declarator • '(' parameter_type_list ')'

    '('  shift, and go to state 264
    '['  shift, and go to state 265

    $default  reduce using rule 173 (abstract_declarator)


State 201

  154 direct_declarator: direct_declarator '(' parameter_type_list ')' •

    $default  reduce using rule 154 (direct_declarator)


State 202

   83 declaration_specifiers: • storage_class_specifier
   84                       | • declaration_specifiers storage_class_specifier
   85                       | • type_specifier
   86                       | • declaration_specifiers type_specifier
   87                       | • type_qualifier
   88                       | • declaration_specifiers type_qualifier
   89                       | • function_specifier
   90                       | • declaration_specifiers function_specifier
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • _BOOL
  106               | • _COMPLEX
  107               | • struct_or_union_specifier
  108               | • enum_specifier
  109               | • typedef_name
  110 struct_or_union_specifier: • struct_or_union '{' struct_declaration_list '}'
  111                          | • struct_or_union IDENT '{' struct_declaration_list '}'
  112                          | • struct_or_union IDENT
  113 struct_or_union: • STRUCT
  114                | • UNION
  127 enum_specifier: • ENUM IDENT
  128               | • ENUM '{' enumerator_list '}'
  129               | • ENUM IDENT '{' enumerator_list '}'
  130               | • ENUM '{' enumerator_list ',' '}'
  131               | • ENUM IDENT '{' enumerator_list ',' '}'
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  140 function_specifier: • INLINE
  164 parameter_type_list: parameter_list ',' • "..."
  166 parameter_list: parameter_list ',' • parameter_declaration
  167 parameter_declaration: • declaration_specifiers declarator
  168                      | • declaration_specifiers
  169                      | • declaration_specifiers abstract_declarator
  186 typedef_name: • IDENT

    IDENT     shift, and go to state 1
    "..."     shift, and go to state 266
    AUTO      shift, and go to state 2
    CHAR      shift, and go to state 3
    CONST     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    ENUM      shift, and go to state 6
    EXTERN    shift, and go to state 7
    FLOAT     shift, and go to state 8
    INLINE    shift, and go to state 9
    INT       shift, and go to state 10
    LONG      shift, and go to state 11
    REGISTER  shift, and go to state 12
    RESTRICT  shift, and go to state 13
    SHORT     shift, and go to state 14
    SIGNED    shift, and go to state 15
    STATIC    shift, and go to state 16
    STRUCT    shift, and go to state 17
    TYPEDEF   shift, and go to state 18
    UNION     shift, and go to state 19
    UNSIGNED  shift, and go to state 20
    VOID      shift, and go to state 21
    VOLATILE  shift, and go to state 22
    _BOOL     shift, and go to state 23
    _COMPLEX  shift, and go to state 24

    declaration_specifiers     go to state 119
    storage_class_specifier    go to state 28
    type_specifier             go to state 29
    struct_or_union_specifier  go to state 30
    struct_or_union            go to state 31
    enum_specifier             go to state 32
    type_qualifier             go to state 33
    function_specifier         go to state 34
    parameter_declaration      go to state 267
    typedef_name               go to state 35


State 203

  155 direct_declarator: direct_declarator '(' identifier_list ')' •

    $default  reduce using rule 155 (direct_declarator)


State 204

  171 identifier_list: identifier_list ',' • IDENT

    IDENT  shift, and go to state 268


State 205

  149 direct_declarator: direct_declarator '[' STATIC assignment_expression • ']'

    ']'  shift, and go to state 269


State 206

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  150 direct_declarator: direct_declarator '[' STATIC type_qualifier_list • assignment_expression ']'
  162 type_qualifier_list: type_qualifier_list • type_qualifier

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    CONST      shift, and go to state 4
    RESTRICT   shift, and go to state 13
    SIZEOF     shift, and go to state 86
    VOLATILE   shift, and go to state 22
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 270
    type_qualifier             go to state 77


State 207

  153 direct_declarator: direct_declarator '[' '*' ']' •

    $default  reduce using rule 153 (direct_declarator)


State 208

  147 direct_declarator: direct_declarator '[' assignment_expression ']' •

    $default  reduce using rule 147 (direct_declarator)


State 209

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression
  151 direct_declarator: direct_declarator '[' type_qualifier_list STATIC • assignment_expression ']'

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 271


State 210

  146 direct_declarator: direct_declarator '[' type_qualifier_list ']' •

    $default  reduce using rule 146 (direct_declarator)


State 211

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   30                 | '*' • cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
  152 direct_declarator: direct_declarator '[' type_qualifier_list '*' • ']'

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    ']'        shift, and go to state 272
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 142
    cast_expression     go to state 151


State 212

  148 direct_declarator: direct_declarator '[' type_qualifier_list assignment_expression • ']'

    ']'  shift, and go to state 273


State 213

  111 struct_or_union_specifier: struct_or_union IDENT '{' struct_declaration_list '}' •

    $default  reduce using rule 111 (struct_or_union_specifier)


State 214

  125 struct_declarator: ':' constant_expression •

    $default  reduce using rule 125 (struct_declarator)


State 215

  117 struct_declaration: specifier_qualifier_list struct_declarator_list ';' •

    $default  reduce using rule 117 (struct_declaration)


State 216

  123 struct_declarator_list: struct_declarator_list ',' • struct_declarator
  124 struct_declarator: • declarator
  125                  | • ':' constant_expression
  126                  | • declarator ':' constant_expression
  141 declarator: • direct_declarator
  142           | • pointer direct_declarator
  143 direct_declarator: • IDENT
  144                  | • '(' declarator ')'
  145                  | • direct_declarator '[' ']'
  146                  | • direct_declarator '[' type_qualifier_list ']'
  147                  | • direct_declarator '[' assignment_expression ']'
  148                  | • direct_declarator '[' type_qualifier_list assignment_expression ']'
  149                  | • direct_declarator '[' STATIC assignment_expression ']'
  150                  | • direct_declarator '[' STATIC type_qualifier_list assignment_expression ']'
  151                  | • direct_declarator '[' type_qualifier_list STATIC assignment_expression ']'
  152                  | • direct_declarator '[' type_qualifier_list '*' ']'
  153                  | • direct_declarator '[' '*' ']'
  154                  | • direct_declarator '(' parameter_type_list ')'
  155                  | • direct_declarator '(' identifier_list ')'
  156                  | • direct_declarator '(' ')'
  157 pointer: • '*'
  158        | • '*' type_qualifier_list
  159        | • '*' pointer
  160        | • '*' type_qualifier_list pointer

    IDENT  shift, and go to state 56
    '('    shift, and go to state 40
    '*'    shift, and go to state 41
    ':'    shift, and go to state 132

    struct_declarator  go to state 274
    declarator         go to state 137
    direct_declarator  go to state 47
    pointer            go to state 48


State 217

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   82 constant_expression: • conditional_expression
  126 struct_declarator: declarator ':' • constant_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 143
    constant_expression        go to state 275


State 218

  131 enum_specifier: ENUM IDENT '{' enumerator_list ',' '}' •

    $default  reduce using rule 131 (enum_specifier)


State 219

   15 primary_expression: '(' expression ')' •

    $default  reduce using rule 15 (primary_expression)


State 220

    3 compound_statement: '{' block_item_list '}' '{' • '}'

    '}'  shift, and go to state 276


State 221

   21 postfix_expression: postfix_expression "->" IDENT •

    $default  reduce using rule 21 (postfix_expression)


State 222

   18 postfix_expression: postfix_expression '(' ')' •

    $default  reduce using rule 18 (postfix_expression)


State 223

   19 postfix_expression: postfix_expression '(' argument_expression_list • ')'
   25 argument_expression_list: argument_expression_list • ',' assignment_expression

    ')'  shift, and go to state 277
    ','  shift, and go to state 278


State 224

   24 argument_expression_list: assignment_expression •

    $default  reduce using rule 24 (argument_expression_list)


State 225

   17 postfix_expression: postfix_expression '[' expression • ']'
   81 expression: expression • ',' assignment_expression

    ']'  shift, and go to state 279
    ','  shift, and go to state 194


State 226

   20 postfix_expression: postfix_expression '.' IDENT •

    $default  reduce using rule 20 (postfix_expression)


State 227

   70 assignment_expression: unary_expression "*=" assignment_expression •

    $default  reduce using rule 70 (assignment_expression)


State 228

   71 assignment_expression: unary_expression "/=" assignment_expression •

    $default  reduce using rule 71 (assignment_expression)


State 229

   72 assignment_expression: unary_expression "%=" assignment_expression •

    $default  reduce using rule 72 (assignment_expression)


State 230

   73 assignment_expression: unary_expression "+=" assignment_expression •

    $default  reduce using rule 73 (assignment_expression)


State 231

   74 assignment_expression: unary_expression "-=" assignment_expression •

    $default  reduce using rule 74 (assignment_expression)


State 232

   75 assignment_expression: unary_expression "<<=" assignment_expression •

    $default  reduce using rule 75 (assignment_expression)


State 233

   76 assignment_expression: unary_expression ">>=" assignment_expression •

    $default  reduce using rule 76 (assignment_expression)


State 234

   77 assignment_expression: unary_expression "&=" assignment_expression •

    $default  reduce using rule 77 (assignment_expression)


State 235

   79 assignment_expression: unary_expression "|=" assignment_expression •

    $default  reduce using rule 79 (assignment_expression)


State 236

   78 assignment_expression: unary_expression "^=" assignment_expression •

    $default  reduce using rule 78 (assignment_expression)


State 237

   69 assignment_expression: unary_expression '=' assignment_expression •

    $default  reduce using rule 69 (assignment_expression)


State 238

   39 multiplicative_expression: multiplicative_expression '*' cast_expression •

    $default  reduce using rule 39 (multiplicative_expression)


State 239

   40 multiplicative_expression: multiplicative_expression '/' cast_expression •

    $default  reduce using rule 40 (multiplicative_expression)


State 240

   41 multiplicative_expression: multiplicative_expression '%' cast_expression •

    $default  reduce using rule 41 (multiplicative_expression)


State 241

   39 multiplicative_expression: multiplicative_expression • '*' cast_expression
   40                          | multiplicative_expression • '/' cast_expression
   41                          | multiplicative_expression • '%' cast_expression
   43 additive_expression: additive_expression '+' multiplicative_expression •  ["<<", ">>", "<=", "==", "!=", "&&", "||", '}', ';', ')', ']', ',', '&', '+', '-', '<', '>', '^', '|', '?', ':']

    '*'  shift, and go to state 175
    '/'  shift, and go to state 176
    '%'  shift, and go to state 177

    $default  reduce using rule 43 (additive_expression)


State 242

   39 multiplicative_expression: multiplicative_expression • '*' cast_expression
   40                          | multiplicative_expression • '/' cast_expression
   41                          | multiplicative_expression • '%' cast_expression
   44 additive_expression: additive_expression '-' multiplicative_expression •  ["<<", ">>", "<=", "==", "!=", "&&", "||", '}', ';', ')', ']', ',', '&', '+', '-', '<', '>', '^', '|', '?', ':']

    '*'  shift, and go to state 175
    '/'  shift, and go to state 176
    '%'  shift, and go to state 177

    $default  reduce using rule 44 (additive_expression)


State 243

   43 additive_expression: additive_expression • '+' multiplicative_expression
   44                    | additive_expression • '-' multiplicative_expression
   46 shift_expression: shift_expression "<<" additive_expression •  ["<<", ">>", "<=", "==", "!=", "&&", "||", '}', ';', ')', ']', ',', '&', '<', '>', '^', '|', '?', ':']

    '+'  shift, and go to state 178
    '-'  shift, and go to state 179

    $default  reduce using rule 46 (shift_expression)


State 244

   43 additive_expression: additive_expression • '+' multiplicative_expression
   44                    | additive_expression • '-' multiplicative_expression
   47 shift_expression: shift_expression ">>" additive_expression •  ["<<", ">>", "<=", "==", "!=", "&&", "||", '}', ';', ')', ']', ',', '&', '<', '>', '^', '|', '?', ':']

    '+'  shift, and go to state 178
    '-'  shift, and go to state 179

    $default  reduce using rule 47 (shift_expression)


State 245

   46 shift_expression: shift_expression • "<<" additive_expression
   47                 | shift_expression • ">>" additive_expression
   50 relational_expression: relational_expression "<=" shift_expression •  ["<=", "==", "!=", "&&", "||", '}', ';', ')', ']', ',', '&', '<', '>', '^', '|', '?', ':']
   52                      | relational_expression "<=" shift_expression •  ["<=", "==", "!=", "&&", "||", '}', ';', ')', ']', ',', '&', '<', '>', '^', '|', '?', ':']

    "<<"  shift, and go to state 180
    ">>"  shift, and go to state 181

    "<="      reduce using rule 50 (relational_expression)
    "<="      [reduce using rule 52 (relational_expression)]
    "=="      reduce using rule 50 (relational_expression)
    "=="      [reduce using rule 52 (relational_expression)]
    "!="      reduce using rule 50 (relational_expression)
    "!="      [reduce using rule 52 (relational_expression)]
    "&&"      reduce using rule 50 (relational_expression)
    "&&"      [reduce using rule 52 (relational_expression)]
    "||"      reduce using rule 50 (relational_expression)
    "||"      [reduce using rule 52 (relational_expression)]
    '}'       reduce using rule 50 (relational_expression)
    '}'       [reduce using rule 52 (relational_expression)]
    ';'       reduce using rule 50 (relational_expression)
    ';'       [reduce using rule 52 (relational_expression)]
    ')'       reduce using rule 50 (relational_expression)
    ')'       [reduce using rule 52 (relational_expression)]
    ']'       reduce using rule 50 (relational_expression)
    ']'       [reduce using rule 52 (relational_expression)]
    ','       reduce using rule 50 (relational_expression)
    ','       [reduce using rule 52 (relational_expression)]
    '&'       reduce using rule 50 (relational_expression)
    '&'       [reduce using rule 52 (relational_expression)]
    '<'       reduce using rule 50 (relational_expression)
    '<'       [reduce using rule 52 (relational_expression)]
    '>'       reduce using rule 50 (relational_expression)
    '>'       [reduce using rule 52 (relational_expression)]
    '^'       reduce using rule 50 (relational_expression)
    '^'       [reduce using rule 52 (relational_expression)]
    '|'       reduce using rule 50 (relational_expression)
    '|'       [reduce using rule 52 (relational_expression)]
    '?'       reduce using rule 50 (relational_expression)
    '?'       [reduce using rule 52 (relational_expression)]
    ':'       reduce using rule 50 (relational_expression)
    ':'       [reduce using rule 52 (relational_expression)]
    $default  reduce using rule 50 (relational_expression)

    reduce/reduce conflict on tokens "<=", "==", "!=", "&&", "||", '}', ';', ')', ']', ',', '&', '<', '>', '^', '|', '?', ':':
       50 relational_expression: relational_expression "<=" shift_expression •
       52 relational_expression: relational_expression "<=" shift_expression •
      Example: relational_expression "<=" shift_expression •
      First reduce derivation
        relational_expression
        ↳ 50: relational_expression "<=" shift_expression •
      Second reduce derivation
        relational_expression
        ↳ 52: relational_expression "<=" shift_expression •



State 246

   46 shift_expression: shift_expression • "<<" additive_expression
   47                 | shift_expression • ">>" additive_expression
   49 relational_expression: relational_expression '<' shift_expression •  ["<=", "==", "!=", "&&", "||", '}', ';', ')', ']', ',', '&', '<', '>', '^', '|', '?', ':']

    "<<"  shift, and go to state 180
    ">>"  shift, and go to state 181

    $default  reduce using rule 49 (relational_expression)


State 247

   46 shift_expression: shift_expression • "<<" additive_expression
   47                 | shift_expression • ">>" additive_expression
   51 relational_expression: relational_expression '>' shift_expression •  ["<=", "==", "!=", "&&", "||", '}', ';', ')', ']', ',', '&', '<', '>', '^', '|', '?', ':']

    "<<"  shift, and go to state 180
    ">>"  shift, and go to state 181

    $default  reduce using rule 51 (relational_expression)


State 248

   49 relational_expression: relational_expression • '<' shift_expression
   50                      | relational_expression • "<=" shift_expression
   51                      | relational_expression • '>' shift_expression
   52                      | relational_expression • "<=" shift_expression
   54 equality_expression: equality_expression "==" relational_expression •  ["==", "!=", "&&", "||", '}', ';', ')', ']', ',', '&', '^', '|', '?', ':']

    "<="  shift, and go to state 182
    '<'   shift, and go to state 183
    '>'   shift, and go to state 184

    $default  reduce using rule 54 (equality_expression)


State 249

   49 relational_expression: relational_expression • '<' shift_expression
   50                      | relational_expression • "<=" shift_expression
   51                      | relational_expression • '>' shift_expression
   52                      | relational_expression • "<=" shift_expression
   55 equality_expression: equality_expression "!=" relational_expression •  ["==", "!=", "&&", "||", '}', ';', ')', ']', ',', '&', '^', '|', '?', ':']

    "<="  shift, and go to state 182
    '<'   shift, and go to state 183
    '>'   shift, and go to state 184

    $default  reduce using rule 55 (equality_expression)


State 250

   54 equality_expression: equality_expression • "==" relational_expression
   55                    | equality_expression • "!=" relational_expression
   57 and_expression: and_expression '&' equality_expression •  ["&&", "||", '}', ';', ')', ']', ',', '&', '^', '|', '?', ':']

    "=="  shift, and go to state 185
    "!="  shift, and go to state 186

    $default  reduce using rule 57 (and_expression)


State 251

   57 and_expression: and_expression • '&' equality_expression
   59 xor_expression: xor_expression '^' and_expression •  ["&&", "||", '}', ';', ')', ']', ',', '^', '|', '?', ':']

    '&'  shift, and go to state 187

    $default  reduce using rule 59 (xor_expression)


State 252

   59 xor_expression: xor_expression • '^' and_expression
   61 or_expression: or_expression '|' xor_expression •  ["&&", "||", '}', ';', ')', ']', ',', '|', '?', ':']

    '^'  shift, and go to state 188

    $default  reduce using rule 61 (or_expression)


State 253

   61 or_expression: or_expression • '|' xor_expression
   63 logical_and_expression: logical_and_expression "&&" or_expression •  ["&&", "||", '}', ';', ')', ']', ',', '?', ':']

    '|'  shift, and go to state 189

    $default  reduce using rule 63 (logical_and_expression)


State 254

   63 logical_and_expression: logical_and_expression • "&&" or_expression
   65 logical_or_expression: logical_or_expression "||" logical_and_expression •  ["||", '}', ';', ')', ']', ',', '?', ':']

    "&&"  shift, and go to state 190

    $default  reduce using rule 65 (logical_or_expression)


State 255

   67 conditional_expression: logical_or_expression '?' expression • ':' conditional_expression
   81 expression: expression • ',' assignment_expression

    ','  shift, and go to state 194
    ':'  shift, and go to state 280


State 256

   81 expression: expression ',' assignment_expression •

    $default  reduce using rule 81 (expression)


State 257

  182 direct_abstract_declarator: '(' ')' •

    $default  reduce using rule 182 (direct_abstract_declarator)


State 258

  184 direct_abstract_declarator: '(' parameter_type_list • ')'

    ')'  shift, and go to state 281


State 259

  175 direct_abstract_declarator: '(' abstract_declarator • ')'

    ')'  shift, and go to state 282


State 260

  176 direct_abstract_declarator: '[' ']' •

    $default  reduce using rule 176 (direct_abstract_declarator)


State 261

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   30                 | '*' • cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
  180 direct_abstract_declarator: '[' '*' • ']'

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    ']'        shift, and go to state 283
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 142
    cast_expression     go to state 151


State 262

  178 direct_abstract_declarator: '[' assignment_expression • ']'

    ']'  shift, and go to state 284


State 263

  174 abstract_declarator: pointer direct_abstract_declarator •  [')', ',']
  177 direct_abstract_declarator: direct_abstract_declarator • '[' ']'
  179                           | direct_abstract_declarator • '[' assignment_expression ']'
  181                           | direct_abstract_declarator • '[' '*' ']'
  183                           | direct_abstract_declarator • '(' ')'
  185                           | direct_abstract_declarator • '(' parameter_type_list ')'

    '('  shift, and go to state 264
    '['  shift, and go to state 265

    $default  reduce using rule 174 (abstract_declarator)


State 264

   83 declaration_specifiers: • storage_class_specifier
   84                       | • declaration_specifiers storage_class_specifier
   85                       | • type_specifier
   86                       | • declaration_specifiers type_specifier
   87                       | • type_qualifier
   88                       | • declaration_specifiers type_qualifier
   89                       | • function_specifier
   90                       | • declaration_specifiers function_specifier
   91 storage_class_specifier: • TYPEDEF
   92                        | • EXTERN
   93                        | • STATIC
   94                        | • AUTO
   95                        | • REGISTER
   96 type_specifier: • VOID
   97               | • CHAR
   98               | • SHORT
   99               | • INT
  100               | • LONG
  101               | • FLOAT
  102               | • DOUBLE
  103               | • SIGNED
  104               | • UNSIGNED
  105               | • _BOOL
  106               | • _COMPLEX
  107               | • struct_or_union_specifier
  108               | • enum_specifier
  109               | • typedef_name
  110 struct_or_union_specifier: • struct_or_union '{' struct_declaration_list '}'
  111                          | • struct_or_union IDENT '{' struct_declaration_list '}'
  112                          | • struct_or_union IDENT
  113 struct_or_union: • STRUCT
  114                | • UNION
  127 enum_specifier: • ENUM IDENT
  128               | • ENUM '{' enumerator_list '}'
  129               | • ENUM IDENT '{' enumerator_list '}'
  130               | • ENUM '{' enumerator_list ',' '}'
  131               | • ENUM IDENT '{' enumerator_list ',' '}'
  137 type_qualifier: • CONST
  138               | • RESTRICT
  139               | • VOLATILE
  140 function_specifier: • INLINE
  163 parameter_type_list: • parameter_list
  164                    | • parameter_list ',' "..."
  165 parameter_list: • parameter_declaration
  166               | • parameter_list ',' parameter_declaration
  167 parameter_declaration: • declaration_specifiers declarator
  168                      | • declaration_specifiers
  169                      | • declaration_specifiers abstract_declarator
  183 direct_abstract_declarator: direct_abstract_declarator '(' • ')'
  185                           | direct_abstract_declarator '(' • parameter_type_list ')'
  186 typedef_name: • IDENT

    IDENT     shift, and go to state 1
    AUTO      shift, and go to state 2
    CHAR      shift, and go to state 3
    CONST     shift, and go to state 4
    DOUBLE    shift, and go to state 5
    ENUM      shift, and go to state 6
    EXTERN    shift, and go to state 7
    FLOAT     shift, and go to state 8
    INLINE    shift, and go to state 9
    INT       shift, and go to state 10
    LONG      shift, and go to state 11
    REGISTER  shift, and go to state 12
    RESTRICT  shift, and go to state 13
    SHORT     shift, and go to state 14
    SIGNED    shift, and go to state 15
    STATIC    shift, and go to state 16
    STRUCT    shift, and go to state 17
    TYPEDEF   shift, and go to state 18
    UNION     shift, and go to state 19
    UNSIGNED  shift, and go to state 20
    VOID      shift, and go to state 21
    VOLATILE  shift, and go to state 22
    _BOOL     shift, and go to state 23
    _COMPLEX  shift, and go to state 24
    ')'       shift, and go to state 285

    declaration_specifiers     go to state 119
    storage_class_specifier    go to state 28
    type_specifier             go to state 29
    struct_or_union_specifier  go to state 30
    struct_or_union            go to state 31
    enum_specifier             go to state 32
    type_qualifier             go to state 33
    function_specifier         go to state 34
    parameter_type_list        go to state 286
    parameter_list             go to state 121
    parameter_declaration      go to state 122
    typedef_name               go to state 35


State 265

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression
  177 direct_abstract_declarator: direct_abstract_declarator '[' • ']'
  179                           | direct_abstract_declarator '[' • assignment_expression ']'
  181                           | direct_abstract_declarator '[' • '*' ']'

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    ']'        shift, and go to state 287
    '&'        shift, and go to state 89
    '*'        shift, and go to state 288
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 289


State 266

  164 parameter_type_list: parameter_list ',' "..." •

    $default  reduce using rule 164 (parameter_type_list)


State 267

  166 parameter_list: parameter_list ',' parameter_declaration •

    $default  reduce using rule 166 (parameter_list)


State 268

  171 identifier_list: identifier_list ',' IDENT •

    $default  reduce using rule 171 (identifier_list)


State 269

  149 direct_declarator: direct_declarator '[' STATIC assignment_expression ']' •

    $default  reduce using rule 149 (direct_declarator)


State 270

  150 direct_declarator: direct_declarator '[' STATIC type_qualifier_list assignment_expression • ']'

    ']'  shift, and go to state 290


State 271

  151 direct_declarator: direct_declarator '[' type_qualifier_list STATIC assignment_expression • ']'

    ']'  shift, and go to state 291


State 272

  152 direct_declarator: direct_declarator '[' type_qualifier_list '*' ']' •

    $default  reduce using rule 152 (direct_declarator)


State 273

  148 direct_declarator: direct_declarator '[' type_qualifier_list assignment_expression ']' •

    $default  reduce using rule 148 (direct_declarator)


State 274

  123 struct_declarator_list: struct_declarator_list ',' struct_declarator •

    $default  reduce using rule 123 (struct_declarator_list)


State 275

  126 struct_declarator: declarator ':' constant_expression •

    $default  reduce using rule 126 (struct_declarator)


State 276

    3 compound_statement: '{' block_item_list '}' '{' '}' •

    $default  reduce using rule 3 (compound_statement)


State 277

   19 postfix_expression: postfix_expression '(' argument_expression_list ')' •

    $default  reduce using rule 19 (postfix_expression)


State 278

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   25 argument_expression_list: argument_expression_list ',' • assignment_expression
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   68 assignment_expression: • conditional_expression
   69                      | • unary_expression '=' assignment_expression
   70                      | • unary_expression "*=" assignment_expression
   71                      | • unary_expression "/=" assignment_expression
   72                      | • unary_expression "%=" assignment_expression
   73                      | • unary_expression "+=" assignment_expression
   74                      | • unary_expression "-=" assignment_expression
   75                      | • unary_expression "<<=" assignment_expression
   76                      | • unary_expression ">>=" assignment_expression
   77                      | • unary_expression "&=" assignment_expression
   78                      | • unary_expression "^=" assignment_expression
   79                      | • unary_expression "|=" assignment_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 102
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 114
    assignment_expression      go to state 292


State 279

   17 postfix_expression: postfix_expression '[' expression ']' •

    $default  reduce using rule 17 (postfix_expression)


State 280

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
   38 multiplicative_expression: • cast_expression
   39                          | • multiplicative_expression '*' cast_expression
   40                          | • multiplicative_expression '/' cast_expression
   41                          | • multiplicative_expression '%' cast_expression
   42 additive_expression: • multiplicative_expression
   43                    | • additive_expression '+' multiplicative_expression
   44                    | • additive_expression '-' multiplicative_expression
   45 shift_expression: • additive_expression
   46                 | • shift_expression "<<" additive_expression
   47                 | • shift_expression ">>" additive_expression
   48 relational_expression: • shift_expression
   49                      | • relational_expression '<' shift_expression
   50                      | • relational_expression "<=" shift_expression
   51                      | • relational_expression '>' shift_expression
   52                      | • relational_expression "<=" shift_expression
   53 equality_expression: • relational_expression
   54                    | • equality_expression "==" relational_expression
   55                    | • equality_expression "!=" relational_expression
   56 and_expression: • equality_expression
   57               | • and_expression '&' equality_expression
   58 xor_expression: • and_expression
   59               | • xor_expression '^' and_expression
   60 or_expression: • xor_expression
   61              | • or_expression '|' xor_expression
   62 logical_and_expression: • or_expression
   63                       | • logical_and_expression "&&" or_expression
   64 logical_or_expression: • logical_and_expression
   65                      | • logical_or_expression "||" logical_and_expression
   66 conditional_expression: • logical_or_expression
   67                       | • logical_or_expression '?' expression ':' conditional_expression
   67                       | logical_or_expression '?' expression ':' • conditional_expression

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression         go to state 100
    postfix_expression         go to state 101
    unary_expression           go to state 142
    cast_expression            go to state 103
    multiplicative_expression  go to state 104
    additive_expression        go to state 105
    shift_expression           go to state 106
    relational_expression      go to state 107
    equality_expression        go to state 108
    and_expression             go to state 109
    xor_expression             go to state 110
    or_expression              go to state 111
    logical_and_expression     go to state 112
    logical_or_expression      go to state 113
    conditional_expression     go to state 293


State 281

  184 direct_abstract_declarator: '(' parameter_type_list ')' •

    $default  reduce using rule 184 (direct_abstract_declarator)


State 282

  175 direct_abstract_declarator: '(' abstract_declarator ')' •

    $default  reduce using rule 175 (direct_abstract_declarator)


State 283

  180 direct_abstract_declarator: '[' '*' ']' •

    $default  reduce using rule 180 (direct_abstract_declarator)


State 284

  178 direct_abstract_declarator: '[' assignment_expression ']' •

    $default  reduce using rule 178 (direct_abstract_declarator)


State 285

  183 direct_abstract_declarator: direct_abstract_declarator '(' ')' •

    $default  reduce using rule 183 (direct_abstract_declarator)


State 286

  185 direct_abstract_declarator: direct_abstract_declarator '(' parameter_type_list • ')'

    ')'  shift, and go to state 294


State 287

  177 direct_abstract_declarator: direct_abstract_declarator '[' ']' •

    $default  reduce using rule 177 (direct_abstract_declarator)


State 288

   11 primary_expression: • IDENT
   12                   | • CHARLIT
   13                   | • STRINGLIT
   14                   | • NUMBERLIT
   15                   | • '(' expression ')'
   16 postfix_expression: • primary_expression
   17                   | • postfix_expression '[' expression ']'
   18                   | • postfix_expression '(' ')'
   19                   | • postfix_expression '(' argument_expression_list ')'
   20                   | • postfix_expression '.' IDENT
   21                   | • postfix_expression "->" IDENT
   22                   | • postfix_expression "++"
   23                   | • postfix_expression "--"
   26 unary_expression: • postfix_expression
   27                 | • "++" unary_expression
   28                 | • "--" unary_expression
   29                 | • '&' cast_expression
   30                 | • '*' cast_expression
   30                 | '*' • cast_expression
   31                 | • '+' cast_expression
   32                 | • '-' cast_expression
   33                 | • '~' cast_expression
   34                 | • '!' cast_expression
   35                 | • SIZEOF unary_expression
   36                 | • ALIGNOF unary_expression
   37 cast_expression: • unary_expression
  181 direct_abstract_declarator: direct_abstract_declarator '[' '*' • ']'

    IDENT      shift, and go to state 79
    CHARLIT    shift, and go to state 80
    STRINGLIT  shift, and go to state 81
    NUMBERLIT  shift, and go to state 82
    "++"       shift, and go to state 83
    "--"       shift, and go to state 84
    ALIGNOF    shift, and go to state 85
    SIZEOF     shift, and go to state 86
    '('        shift, and go to state 88
    ']'        shift, and go to state 295
    '&'        shift, and go to state 89
    '*'        shift, and go to state 90
    '+'        shift, and go to state 91
    '-'        shift, and go to state 92
    '~'        shift, and go to state 93
    '!'        shift, and go to state 94

    primary_expression  go to state 100
    postfix_expression  go to state 101
    unary_expression    go to state 142
    cast_expression     go to state 151


State 289

  179 direct_abstract_declarator: direct_abstract_declarator '[' assignment_expression • ']'

    ']'  shift, and go to state 296


State 290

  150 direct_declarator: direct_declarator '[' STATIC type_qualifier_list assignment_expression ']' •

    $default  reduce using rule 150 (direct_declarator)


State 291

  151 direct_declarator: direct_declarator '[' type_qualifier_list STATIC assignment_expression ']' •

    $default  reduce using rule 151 (direct_declarator)


State 292

   25 argument_expression_list: argument_expression_list ',' assignment_expression •

    $default  reduce using rule 25 (argument_expression_list)


State 293

   67 conditional_expression: logical_or_expression '?' expression ':' conditional_expression •

    $default  reduce using rule 67 (conditional_expression)


State 294

  185 direct_abstract_declarator: direct_abstract_declarator '(' parameter_type_list ')' •

    $default  reduce using rule 185 (direct_abstract_declarator)


State 295

  181 direct_abstract_declarator: direct_abstract_declarator '[' '*' ']' •

    $default  reduce using rule 181 (direct_abstract_declarator)


State 296

  179 direct_abstract_declarator: direct_abstract_declarator '[' assignment_expression ']' •

    $default  reduce using rule 179 (direct_abstract_declarator)
