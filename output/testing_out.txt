DECLARATION: The variable `i` has storage class AUTO and is a(n)
    INT 
FUNCTION DEFINITION: The variable `y` has storage class EXTERN and is a(n)
    function taking parameters
    (
        The variable `n` has storage class AUTO and is a(n)
            INT 
    )
    returning
        pointer to a(n)
            function taking parameters
            (
                The variable `n` has storage class AUTO and is a(n)
                    INT 
            )
            returning
                INT 
0x394a6050 : compound
{
    0x394a3940 : expression
        VARIABLE (resolved) "n"
    0x394a52c0 : if
    (
        NUMBERLIT    INTEGER    4    INT
    )
    then
        0x394a5220 : compound
        {
            0x394a4df0 : for
            (
                BINARY_OP "="
                .left
                    VARIABLE (resolved) "i"
                .right
                    NUMBERLIT    INTEGER    0    INT
            ;
                BINARY_OP "<"
                .left
                    VARIABLE (resolved) "i"
                .right
                    NUMBERLIT    INTEGER    10    INT
            ;
                UNARY_OP "++"
                .operand
                    VARIABLE (resolved) "i"
            )
            do
                0x394a5180 : compound
                {
                    0x394a4ce0 : break (0x394a4df0)
                    0x394a4bd0 : for
                    (
                    ;
                    ;
                    )
                    do
                        0x394a50b0 : compound
                        {
                            0x394a4ff0 : break (0x394a4bd0)
                            0x394a5060 : continue (0x394a4bd0)
                        }
                    0x394a5100 : continue (0x394a4df0)
                }
        }
    else
        0x394a5270 : goto 0x394a5180
    0x394a5360 : while
    (
        NUMBERLIT    INTEGER    0    INT
    )
    do
        0x394a5450 : compound
        {
            0x394a53b0 : break (0x394a5360)
            0x394a5400 : continue (0x394a5360)
        }
    0x394a54d0 : do
        0x394a55c0 : compound
        {
            0x394a5520 : break (0x394a54d0)
            0x394a5570 : continue (0x394a54d0)
        }
    while
    (
        NUMBERLIT    INTEGER    0    INT
    )
    0x394a56b0 : while
    (
        NUMBERLIT    INTEGER    0    INT
    )
    do
        0x394a5e70 : compound
        {
            0x394a5700 : switch
            (
                BINARY_OP "+"
                .left
                    VARIABLE (resolved) "n"
                .right
                    NUMBERLIT    INTEGER    8    INT
            ) == [
                case
                    NUMBERLIT    INTEGER    1    INT
                : 0x394a5880
                case
                    BINARY_OP "-"
                    .left
                        NUMBERLIT    INTEGER    5    INT
                    .right
                        NUMBERLIT    INTEGER    8    INT
                : 0x394a5a50
                case
                    NUMBERLIT    INTEGER    102    INT
                : 0x394a5be0
                case
                    NUMBERLIT    INTEGER    101    INT
                : 0x394a5be0
                case
                    NUMBERLIT    INTEGER    100    INT
                : 0x394a5be0
                default : 0x394a5c30
            ]
            then
                0x394a5e20 : compound
                {
                    0x394a5880 : break (0x394a5700)
                    0x394a5a50 : break (0x394a5700)
                    0x394a5be0 : break (0x394a5700)
                }
        }
    0x394a6000 : return
        BINARY_OP "+"
        .left
            NUMBERLIT    INTEGER    90    INT
        .right
            NUMBERLIT    INTEGER    2    INT
}

