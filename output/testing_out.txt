DECLARATION: The variable `i` has storage class AUTO and is a(n)
    INT 
FUNCTION DEFINITION: The variable `y` has storage class EXTERN and is a(n)
    function taking parameters
    (
        The variable `n` has storage class AUTO and is a(n)
            INT 
    )
    returning
        pointer to a(n)
            function taking parameters
            (
                The variable `n` has storage class AUTO and is a(n)
                    INT 
            )
            returning
                INT 
0x209c070 : compound
{
    0x2099940 : expression
        VARIABLE (resolved) "n"
    0x209b2c0 : if
    (
        NUMBERLIT    INTEGER    4    INT
    )
    then
        0x209b220 : compound
        {
            0x209adf0 : for
            (
                BINARY_OP "="
                .left
                    VARIABLE (resolved) "i"
                .right
                    NUMBERLIT    INTEGER    0    INT
            ;
                BINARY_OP "<"
                .left
                    VARIABLE (resolved) "i"
                .right
                    NUMBERLIT    INTEGER    10    INT
            ;
                UNARY_OP "++"
                .operand
                    VARIABLE (resolved) "i"
            )
            do
                0x209b180 : compound
                {
                    0x209ace0 : break (0x209adf0)
                    0x209abd0 : for
                    (
                    ;
                    ;
                    )
                    do
                        0x209b0b0 : compound
                        {
                            0x209aff0 : break (0x209abd0)
                            0x209b060 : continue (0x209abd0)
                        }
                    0x209b100 : continue (0x209adf0)
                }
        }
    else
        0x209b270 : goto 0x209b180
    0x209b360 : while
    (
        NUMBERLIT    INTEGER    0    INT
    )
    do
        0x209b450 : compound
        {
            0x209b3b0 : break (0x209b360)
            0x209b400 : continue (0x209b360)
        }
    0x209b4d0 : do
        0x209b5c0 : compound
        {
            0x209b520 : break (0x209b4d0)
            0x209b570 : continue (0x209b4d0)
        }
    while
    (
        NUMBERLIT    INTEGER    0    INT
    )
    0x209b6b0 : while
    (
        NUMBERLIT    INTEGER    0    INT
    )
    do
        0x209be90 : compound
        {
            0x209b720 : switch
            (
                BINARY_OP "+"
                .left
                    VARIABLE (resolved) "n"
                .right
                    NUMBERLIT    INTEGER    8    INT
            ) == [
                case
                    NUMBERLIT    INTEGER    1    INT
                : 0x209b8e0
                case
                    BINARY_OP "-"
                    .left
                        NUMBERLIT    INTEGER    5    INT
                    .right
                        NUMBERLIT    INTEGER    8    INT
                : 0x209ba70
                case
                    NUMBERLIT    INTEGER    102    INT
                : 0x209bc00
                case
                    NUMBERLIT    INTEGER    101    INT
                : 0x209bc00
                case
                    NUMBERLIT    INTEGER    100    INT
                : 0x209bc00
                default : 0x209bc50
            ]
            then
                0x209be40 : compound
                {
                    0x209b8e0 : break (0x209b720)
                    0x209ba70 : break (0x209b720)
                    0x209bc00 : break (0x209b720)
                }
        }
    0x209c020 : return
        BINARY_OP "+"
        .left
            NUMBERLIT    INTEGER    90    INT
        .right
            NUMBERLIT    INTEGER    2    INT
}

