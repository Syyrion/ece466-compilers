EXTERNAL DECLARATION: The variable `printf` has storage class REGISTER and is a(n)
    function with unknown parameters returning
        INT 

EXTERNAL DECLARATION: The variable `u` has storage class REGISTER and is a(n)
    INT 

EXTERNAL DECLARATION: The variable `p` has storage class REGISTER and is a(n)
    pointer to a(n)
        INT 

EXTERNAL DECLARATION: The variable `s` has storage class REGISTER and is a(n)
    INT 

EXTERNAL DECLARATION: The variable `h` has storage class REGISTER and is a(n)
    array with size
    [
        NUMBERLIT    INTEGER    10    INT
    ]
    containing
        INT 

EXTERNAL DECLARATION: The variable `g` has storage class REGISTER and is a(n)
    INT 

FUNCTION DEFINITION: The variable `y` has storage class EXTERN and is a(n)
    function taking parameters
    (
        The variable `a` has storage class AUTO and is a(n)
            INT 
        The variable `b` has storage class AUTO and is a(n)
            INT 
    )
    returning
        INT 
0x219e66b0 : compound
{
    0x219e6730 : expression
        FUNCTION_CALL        .name
            VARIABLE (resolved) "printf"
        .arg[0]
            STRINGLIT "arg %d %d\n"
        .arg[1]
            VARIABLE (resolved) "a"
        .arg[2]
            VARIABLE (resolved) "b"
    0x219e6410 : return
        BINARY_OP "/"
        .left
            VARIABLE (resolved) "a"
        .right
            VARIABLE (resolved) "b"
}

total arguments = 2
total local variables = 0
total temp variables = 3
total string literals = 1
(exit) BB0:
        ARGBEGIN        
    { %T1 CHAR * }    LEA    { "arg %d %d\n" (0) CHAR [11] }    
        ARG    { b (1) arg AUTO INT  }    
        ARG    { a (0) arg AUTO INT  }    
        ARG    { %T1 CHAR * }    
    { %T0 INT  }    CALL    printf    
    { %T2 INT  }    DIV    { a (0) arg AUTO INT  }    { b (1) arg AUTO INT  }
        RET    { %T2 INT  }    
DECLARATION: The variable `a` has storage class AUTO and is a(n)
    INT 
DECLARATION: The variable `b` has storage class AUTO and is a(n)
    INT 
DECLARATION: The variable `c` has storage class AUTO and is a(n)
    INT 
DECLARATION: The variable `d` has storage class AUTO and is a(n)
    INT 
FUNCTION DEFINITION: The variable `main` has storage class EXTERN and is a(n)
    function with unknown parameters returning
        INT 
0x219e7e60 : compound
{
    0x219e7350 : expression
        BINARY_OP "="
        .left
            UNARY_OP "*"
            .operand
                BINARY_OP "+"
                .left
                    VARIABLE (resolved) "h"
                .right
                    NUMBERLIT    INTEGER    3    INT
        .right
            NUMBERLIT    INTEGER    9    INT
    0x219e7bc0 : expression
        FUNCTION_CALL        .name
            VARIABLE (resolved) "printf"
        .arg[0]
            STRINGLIT "%d, %d\n"
        .arg[1]
            UNARY_OP "*"
            .operand
                BINARY_OP "+"
                .left
                    VARIABLE (resolved) "h"
                .right
                    NUMBERLIT    INTEGER    3    INT
        .arg[2]
            BINARY_OP "-"
            .left
                VARIABLE (resolved) "h"
            .right
                BINARY_OP "+"
                .left
                    VARIABLE (resolved) "h"
                .right
                    NUMBERLIT    INTEGER    3    INT
    0x219e7670 : return
        NUMBERLIT    INTEGER    0    INT
}

total arguments = 0
total local variables = 0
total temp variables = 16
total string literals = 1
(exit) BB0:
    { %T1 INT * }    LEA    { h (0) REGISTER INT [10] }    
    { %T2 (missing type) }    MUL    { $3 INT  }    { $4 INT  }
    { %T0 INT * }    ADD    { %T1 INT * }    { %T2 (missing type) }
        STORE    { $9 INT  }    { %T0 INT * }
        ARGBEGIN        
    { %T4 CHAR * }    LEA    { "%d, %d\n" (0) CHAR [8] }    
    { %T7 INT * }    LEA    { h (0) REGISTER INT [10] }    
    { %T8 (missing type) }    MUL    { $3 INT  }    { $4 INT  }
    { %T6 INT * }    ADD    { %T7 INT * }    { %T8 (missing type) }
    { %T9 INT  }    LOAD    { %T6 INT * }    
    { %T11 INT * }    LEA    { h (0) REGISTER INT [10] }    
    { %T13 INT * }    LEA    { h (0) REGISTER INT [10] }    
    { %T14 (missing type) }    MUL    { $3 INT  }    { $4 INT  }
    { %T12 INT * }    ADD    { %T13 INT * }    { %T14 (missing type) }
    { %T15 (missing type) }    SUB    { %T11 INT * }    { %T12 INT * }
    { %T10 INT  }    DIV    { %T15 (missing type) }    { $4 INT  }
        ARG    { %T10 INT  }    
        ARG    { %T9 INT  }    
        ARG    { %T4 CHAR * }    
    { %T3 INT  }    CALL    printf    
        RET    { $0 INT  }    
