EXTERNAL DECLARATION: The variable `printf` has storage class REGISTER and is a(n)
    function with unknown parameters returning
        INT 

EXTERNAL DECLARATION: The variable `u` has storage class REGISTER and is a(n)
    INT 

EXTERNAL DECLARATION: The variable `p` has storage class REGISTER and is a(n)
    pointer to a(n)
        INT 

EXTERNAL DECLARATION: The variable `s` has storage class REGISTER and is a(n)
    INT 

EXTERNAL DECLARATION: The variable `h` has storage class REGISTER and is a(n)
    array with size
    [
        NUMBERLIT    INTEGER    10    INT
    ]
    containing
        INT 

EXTERNAL DECLARATION: The variable `g` has storage class REGISTER and is a(n)
    INT 

DECLARATION: The variable `a` has storage class AUTO and is a(n)
    INT 
DECLARATION: The variable `b` has storage class AUTO and is a(n)
    INT 
DECLARATION: The variable `c` has storage class AUTO and is a(n)
    INT 
DECLARATION: The variable `d` has storage class AUTO and is a(n)
    INT 
DECLARATION: The variable `i` has storage class AUTO and is a(n)
    INT 
FUNCTION DEFINITION: The variable `main` has storage class EXTERN and is a(n)
    function with unknown parameters returning
        INT 
0x39dc50a0 : compound
{
    0x39dc4ab0 : for
    (
        BINARY_OP "="
        .left
            VARIABLE (resolved) "i"
        .right
            NUMBERLIT    INTEGER    0    INT
    ;
        BINARY_OP "<"
        .left
            VARIABLE (resolved) "i"
        .right
            NUMBERLIT    INTEGER    4    INT
    ;
        UNARY_OP "++"
        .operand
            VARIABLE (resolved) "i"
    )
    do
        0x39dc4f20 : compound
        {
            0x39dc4910 : expression
                FUNCTION_CALL                .name
                    VARIABLE (resolved) "printf"
                .arg[0]
                    STRINGLIT "hello"
        }
    0x39dc5040 : return
        NUMBERLIT    INTEGER    0    INT
}

total arguments = 0
total local variables = 1
total temp variables = 4
total string literals = 1
BB0:
    { i (0) AUTO INT  }    MOV    { $0 INT  }    
        JP    BB3    
BB1:
        ARGBEGIN        
    { %T1 CHAR * }    LEA    { "hello" (0) CHAR [6] }    
        ARG    { %T1 CHAR * }    
    { %T0 INT  }    CALL    printf    
BB2:
    { %T2 INT  }    MOV    { i (0) AUTO INT  }    
    { i (0) AUTO INT  }    ADD    { i (0) AUTO INT  }    { $1 INT  }
BB3:
        CMP    { i (0) AUTO INT  }    { $4 INT  }
    { %T3 INT  }    SETM        
        CMP    { %T3 INT  }    { $0 INT  }
        JPNZ    BB1    
(exit) BB4:
        RET    { $0 INT  }    
