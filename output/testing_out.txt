DECLARATION: The variable `i` has storage class AUTO and is a(n)
    INT 
FUNCTION DEFINITION: The variable `y` has storage class EXTERN and is a(n)
    function taking parameters
    (
        The variable `n` has storage class AUTO and is a(n)
            INT 
    )
    returning
        pointer to a(n)
            function taking parameters
            (
                The variable `n` has storage class AUTO and is a(n)
                    INT 
            )
            returning
                INT 
0xe1c1050 : compound
{
    0xe1be940 : expression
        VARIABLE (resolved) "n"
    0xe1c02c0 : if
    (
        NUMBERLIT    INTEGER    4    INT
    )
    then
        0xe1c0220 : compound
        {
            0xe1bfdf0 : for
            (
                BINARY_OP "="
                .left
                    VARIABLE (resolved) "i"
                .right
                    NUMBERLIT    INTEGER    0    INT
            ;
                BINARY_OP "<"
                .left
                    VARIABLE (resolved) "i"
                .right
                    NUMBERLIT    INTEGER    10    INT
            ;
                UNARY_OP "++"
                .operand
                    VARIABLE (resolved) "i"
            )
            do
                0xe1c0180 : compound
                {
                    0xe1bfce0 : break (0xe1bfdf0)
                    0xe1bfbd0 : for
                    (
                    ;
                    ;
                    )
                    do
                        0xe1c00b0 : compound
                        {
                            0xe1bfff0 : break (0xe1bfbd0)
                            0xe1c0060 : continue (0xe1bfbd0)
                        }
                    0xe1c0100 : continue (0xe1bfdf0)
                }
        }
    else
        0xe1c0270 : goto 0xe1c0180
    0xe1c0360 : while
    (
        NUMBERLIT    INTEGER    0    INT
    )
    do
        0xe1c0450 : compound
        {
            0xe1c03b0 : break (0xe1c0360)
            0xe1c0400 : continue (0xe1c0360)
        }
    0xe1c04d0 : do
        0xe1c05c0 : compound
        {
            0xe1c0520 : break (0xe1c04d0)
            0xe1c0570 : continue (0xe1c04d0)
        }
    while
    (
        NUMBERLIT    INTEGER    0    INT
    )
    0xe1c06b0 : while
    (
        NUMBERLIT    INTEGER    0    INT
    )
    do
        0xe1c0e70 : compound
        {
            0xe1c0700 : switch
            (
                BINARY_OP "+"
                .left
                    VARIABLE (resolved) "n"
                .right
                    NUMBERLIT    INTEGER    8    INT
            ) == [
                case
                    NUMBERLIT    INTEGER    1    INT
                : 0xe1c0880
                case
                    BINARY_OP "-"
                    .left
                        NUMBERLIT    INTEGER    5    INT
                    .right
                        NUMBERLIT    INTEGER    8    INT
                : 0xe1c0a50
                case
                    NUMBERLIT    INTEGER    102    INT
                : 0xe1c0be0
                case
                    NUMBERLIT    INTEGER    101    INT
                : 0xe1c0be0
                case
                    NUMBERLIT    INTEGER    100    INT
                : 0xe1c0be0
                default : 0xe1c0c30
            ]
            then
                0xe1c0e20 : compound
                {
                    0xe1c0880 : break (0xe1c0700)
                    0xe1c0a50 : break (0xe1c0700)
                    0xe1c0be0 : break (0xe1c0700)
                }
        }
    0xe1c1000 : return
        BINARY_OP "+"
        .left
            NUMBERLIT    INTEGER    90    INT
        .right
            NUMBERLIT    INTEGER    2    INT
}

